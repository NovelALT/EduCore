INSERT INTO `lessons` (`lesson_id`, `course_id`, `title`, `content`, `order_number`) VALUES
(1, 1, 'Python Syntax และพื้นฐานการเขียนโปรแกรม', '   <style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3, h4 { /* เพิ่ม h4 */\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2px solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n         h4 { /* สไตล์สำหรับหัวข้อย่อย เช่น Code Example, Output, Cautions */\n            color: #007bff;\n            margin-top: 18px;\n            margin-bottom: 10px;\n         }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n            font-size: 0.9em; /* ปรับขนาดตัวอักษรโค้ด */\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n            font-size: 0.9em; /* ปรับขนาดตัวอักษรใน pre */\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n         .code-output { /* สไตล์สำหรับแสดงผลลัพธ์โค้ด */\n            background-color: #e9f1f7; /* สีฟ้าอ่อน */\n            color: #003366; /* สีน้ำเงินเข้ม */\n            padding: 10px;\n            border-left: 4px solid #0056b3; /* เส้นซ้ายสีน้ำเงิน */\n            margin-bottom: 15px;\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            font-size: 0.9em;\n            white-space: pre-wrap; /* Preserve whitespace and wrap text */\n            word-break: break-all; /* Break long words */\n         }\n         .warning { /* สไตล์สำหรับข้อควรระวัง / Error */\n            background-color: #fff3e0; /* สีส้มอ่อน */\n            border-left: 4px solid #ff9800; /* เส้นซ้ายสีส้ม */\n            padding: 10px 15px;\n            margin-bottom: 15px;\n            border-radius: 4px;\n         }\n         .warning strong {\n             color: #ff9800; /* สีส้ม */\n         }\n\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>Python Syntax และพื้นฐานการเขียนโปรแกรม (แบบละเอียด)</h1>\n\n        <p>ยินดีต้อนรับสู่การเรียนรู้พื้นฐาน Python แบบเจาะลึกครับ! เนื้อหาส่วนนี้จะขยายความจากพื้นฐานเดิมที่คุณมี โดยเพิ่มโค้ดตัวอย่างที่รันได้ (พร้อมผลลัพธ์จำลอง) การอธิบาย Error ที่พบบ่อย และชี้จุดที่ต้องระวังในแต่ละหัวข้อสำคัญ เพื่อให้คุณเข้าใจหลักการและสามารถนำไปเขียนโค้ดจริงได้</p>\n\n        <h2>1. ทำความรู้จักกับ Python และการเตรียมพร้อม</h2>\n        <p><strong>Python คืออะไร?</strong> เป็นภาษาโปรแกรมระดับสูงที่เน้นความอ่านง่ายและใช้งานได้หลากหลาย <br> <strong>ทำไมต้อง Python?</strong> อ่านง่าย, หลากหลาย (เว็บ, Data Science, AI, เกม), มีไลบรารีเยอะ, ชุมชนใหญ่ <br> <strong>การติดตั้ง:</strong> ดาวน์โหลดจาก <a href=\"https://www.python.org/downloads/\" target=\"_blank\">python.org</a> <br> <strong>สภาพแวดล้อม:</strong> ใช้ Text Editor หรือ IDE (VS Code, PyCharm, Thonny) <br> <strong>การรัน:</strong> ใช้ Interpreter โต้ตอบ หรือรันไฟล์ `.py` ใน Command Prompt/Terminal</p>\n\n        <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอในการเตรียมพร้อม</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>Python Not in PATH:</strong> บางครั้งติดตั้งแล้วแต่พิมพ์ <code>python</code> ใน Command Prompt ไม่ได้ มักต้องเพิ่ม Python Executable ลงใน Environment Variables ของระบบ (PATH)</li>\n                <li><strong>ติดตั้งหลายเวอร์ชัน:</strong> ถ้าติดตั้ง Python 2 และ Python 3 อาจต้องพิมพ์ <code>python3</code> แทน <code>python</code> และ <code>pip3</code> แทน <code>pip</code></li>\n                <li><strong>ไม่ได้ติดตั้ง pip:</strong> Pip (Package Installer for Python) สำคัญสำหรับการติดตั้งไลบรารี ส่วนใหญ่มาพร้อม Python 3 แต่ควรตรวจสอบ</li>\n            </ul>\n        </div>\n\n        <h2>2. Basic Syntax: โปรแกรมแรก \"Hello, World!\"</h2>\n        <p>Syntax คือกฎไวยากรณ์ โค้ด Python อ่านจากบนลงล่าง คำสั่งมักอยู่คนละบรรทัด</p>\n        <p><strong>ฟังก์ชัน <code>print()</code>:</strong> ใช้แสดงผลออกหน้าจอ ข้อมูลที่จะแสดงอยู่ในวงเล็บ <code>()</code> สำหรับข้อความ (String) ต้องอยู่ในเครื่องหมาย <code>\" \"</code> หรือ <code>\' \'</code></p>\n\n        <h4>โค้ดตัวอย่าง: Hello, World!</h4>\n        <pre><code>\n# นี่คือโค้ด Python บรรทัดแรก\nprint(\"Hello, World!\")\nprint(\'สวัสดีครับ Python!\') # ใช้ single quote ก็ได้\n        </code></pre>\n\n        <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nHello, World!\nสวัสดีครับ Python!\n        </div>\n\n        <h4>คำอธิบาย Syntax</h4>\n        <ul>\n            <li><code>print(...)</code>: ฟังก์ชันแสดงผล</li>\n            <li><code>\"...\"</code> หรือ <code>\'...\'</code>: ข้อความ (String Literal)</li>\n            <li>แต่ละบรรทัดคือหนึ่งคำสั่ง (Statement)</li>\n        </ul>\n\n         <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>SyntaxError:</strong> ผิดกฎไวยากรณ์ เช่น ลืมปิดวงเล็บ, ลืมปิดเครื่องหมาย quote โปรแกรมจะรันไม่ได้เลย</li>\n            </ul>\n            <strong>ตัวอย่าง Error:</strong>\n            <pre><code class=\"language-python\">\nprint(\"Hello, World!\" <span class=\"code-comment\"># ลืมปิดวงเล็บ</span>\n            </code></pre>\n             <p>เมื่อรัน จะได้ Error ประมาณนี้:</p>\n            <pre class=\"code-output\">\nSyntaxError: invalid syntax\n            </pre>\n        </div>\n\n\n        <h2>3. Comments (หมายเหตุ)</h2>\n        <p>ข้อความในโค้ดที่โปรแกรมจะข้ามไป ใช้สำหรับอธิบายโค้ด</p>\n        <ul>\n            <li><strong>Single-line Comment:</strong> ใช้ <code>#</code> นำหน้า</li>\n            <li><strong>Multi-line Comment (Docstrings):</strong> ใช้ <code>\"\"\" \"\"\"</code> หรือ <code>\'\'\' \'\'\'</code> ล้อมรอบ มักใช้อธิบายฟังก์ชัน คลาส โมดูล</li>\n        </ul>\n\n        <h4>โค้ดตัวอย่าง: Comments</h4>\n        <pre><code>\n# นี่คือ Single-line Comment\n\n\"\"\"\nนี่คือ Multi-line Comment\nบรรทัดนี้ก็เป็น Comment\n\"\"\"\nprint(\"บรรทัดนี้ถูกรัน\") # Comment หลังคำสั่ง\n        </code></pre>\n\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nบรรทัดนี้ถูกรัน\n        </div>\n         <p><strong>คำอธิบาย:</strong> ส่วนที่เป็น Comment จะไม่แสดงผล</p>\n\n\n        <h2>4. Variables (ตัวแปร) และ Data Types (ชนิดข้อมูล)</h2>\n        <p><strong>ตัวแปร:</strong> ชื่อที่ใช้เก็บข้อมูลในหน่วยความจำ <br> <strong>การสร้าง/กำหนดค่า:</strong> ใช้ <code>=</code> เช่น <code>ชื่อตัวแปร = ค่า</code> <br> <strong>Dynamic Typing:</strong> Python รู้ชนิดข้อมูลจากค่าที่กำหนด ไม่ต้องประกาศชนิดข้อมูลล่วงหน้า</p>\n\n        <h4>โค้ดตัวอย่าง: ตัวแปรและชนิดข้อมูล</h4>\n        <pre><code>\nage = 30                 # int (จำนวนเต็ม)\nprice = 19.99            # float (ทศนิยม)\nname = \"Somsak\"          # str (ข้อความ)\nis_active = True         # bool (True/False - ตัวใหญ่)\nnothing = None           # NoneType (ไม่มีค่า)\n\nprint(\"อายุ:\", age, type(age))\nprint(\"ราคา:\", price, type(price))\nprint(\"ชื่อ:\", name, type(name))\nprint(\"สถานะ:\", is_active, type(is_active))\nprint(\"ค่าว่าง:\", nothing, type(nothing))\n\n# ตัวแปรสามารถเปลี่ยนชนิดข้อมูลที่เก็บได้ (Dynamic Typing)\nage = \"สามสิบ\"\nprint(\"อายุ (หลังจากเปลี่ยน):\", age, type(age))\n        </code></pre>\n\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nอายุ: 30 &lt;class \'int\'&gt;\nราคา: 19.99 &lt;class \'float\'&gt;\nชื่อ: Somsak &lt;class \'str\'&gt;\nสถานะ: True &lt;class \'bool\'&gt;\nค่าว่าง: None &lt;class \'NoneType\'&gt;\nอายุ (หลังจากเปลี่ยน): สามสิบ &lt;class \'str\'&gt;\n        </div>\n         <p><strong>คำอธิบาย:</strong> <code>type()</code> ใช้ตรวจสอบชนิดข้อมูล ค่าของตัวแปรสามารถเปลี่ยนชนิดได้</p>\n\n        <h4>การแปลงชนิดข้อมูล (Type Casting)</h4>\n        <p>ใช้ฟังก์ชันเช่น <code>int()</code>, <code>float()</code>, <code>str()</code>, <code>bool()</code></p>\n         <pre><code>\nnum_str = \"123\"\nnum_int = int(num_str)       # แปลง string เป็น int\nnum_float = float(num_str)   # แปลง string เป็น float\n\nprint(num_str, type(num_str))\nprint(num_int, type(num_int))\nprint(num_float, type(num_float))\n\nfloat_val = 99.5\nstr_from_float = str(float_val) # แปลง float เป็น string\nprint(str_from_float, type(str_from_float))\n\nbool_from_int_zero = bool(0)     # แปลง 0 เป็น bool (ได้ False)\nbool_from_int_nonzero = bool(5) # แปลง int อื่นๆ เป็น bool (ได้ True)\nprint(bool_from_int_zero, bool_from_int_nonzero)\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\n123 &lt;class \'str\'&gt;\n123 &lt;class \'int\'&gt;\n123.0 &lt;class \'float\'&gt;\n99.5 &lt;class \'str\'&gt;\nFalse True\n        </div>\n\n         <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>ValueError:</strong> เมื่อพยายามแปลงค่าที่ไม่สามารถแปลงเป็นชนิดนั้นได้จริง</li>\n                <li><strong>NameError:</strong> เมื่อพยายามใช้ตัวแปรที่ยังไม่ได้กำหนดค่า</li>\n                <li><strong>การตั้งชื่อตัวแปร:</strong> ห้ามเริ่มด้วยตัวเลข ห้ามมีอักขระพิเศษบางตัว เป็น Case-sensitive</li>\n            </ul>\n            <strong>ตัวอย่าง Error:</strong>\n            <pre><code class=\"language-python\">\ninvalid_number_str = \"hello\"\n# int(invalid_number_str) # จะเกิด ValueError\n            </code></pre>\n            <pre class=\"code-output\">\nValueError: invalid literal for int() with base 10: \'hello\'\n            </pre>\n             <pre><code class=\"language-python\">\n# print(undefined_variable) # จะเกิด NameError\n            </code></pre>\n             <pre class=\"code-output\">\nNameError: name \'undefined_variable\' is not defined\n            </pre>\n             <pre><code class=\"language-python\">\n# 1st_name = \"Test\" # จะเกิด SyntaxError\n            </code></pre>\n             <pre class=\"code-output\">\nSyntaxError: invalid syntax\n            </pre>\n             <pre><code class=\"language-python\">\nmyVar = 10\n# print(myvar) # จะเกิด NameError เพราะตัวพิมพ์เล็ก/ใหญ่ต่างกัน\n            </code></pre>\n             <pre class=\"code-output\">\nNameError: name \'myvar\' is not defined. Did you mean: \'myVar\'?\n            </pre>\n        </div>\n\n\n        <h2>5. Operators (ตัวดำเนินการ)</h2>\n        <p>ใช้กระทำกับข้อมูล มีหลายประเภท เช่น คณิตศาสตร์, เปรียบเทียบ, ตรรกะ</p>\n\n        <h4>โค้ดตัวอย่าง: ตัวดำเนินการ</h4>\n        <pre><code>\n# Arithmetic Operators\na = 10\nb = 3\nprint(\"a + b =\", a + b)\nprint(\"a - b =\", a - b)\nprint(\"a * b =\", a * b)\nprint(\"a / b =\", a / b)   # ผลลัพธ์ทศนิยม\nprint(\"a % b =\", a % b)   # หารเอาเศษ\nprint(\"a // b =\", a // b) # หารเอาส่วน\nprint(\"a ** b =\", a ** b) # ยกกำลัง\n\n# Comparison Operators (ผลลัพธ์เป็น True/False)\nx = 5\ny = 10\nprint(\"x == y คือ\", x == y)\nprint(\"x != y คือ\", x != y)\nprint(\"x < y คือ\", x < y)\nprint(\"x >= y คือ\", x >= y)\n\n# Logical Operators (and, or, not)\nis_sunny = True\nis_warm = False\nprint(\"is_sunny and is_warm คือ\", is_sunny and is_warm)\nprint(\"is_sunny or is_warm คือ\", is_sunny or is_warm)\nprint(\"not is_warm คือ\", not is_warm)\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\na + b = 13\na - b = 7\na * b = 30\na / b = 3.3333333333333335\na % b = 1\na // b = 3\na ** b = 1000\nx == y คือ False\nx != y คือ True\nx &lt; y คือ True\nx &gt;= y คือ False\nis_sunny and is_warm คือ False\nis_sunny or is_warm คือ True\nnot is_warm คือ True\n        </div>\n\n         <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>TypeError:</strong> เมื่อใช้ตัวดำเนินการกับชนิดข้อมูลที่ไม่รองรับ (เช่น บวกตัวเลขกับ List, ลบ String กับตัวเลข)</li>\n                <li><strong>ZeroDivisionError:</strong> เมื่อพยายามหารด้วยศูนย์ (0)</li>\n            </ul>\n            <strong>ตัวอย่าง Error:</strong>\n            <pre><code class=\"language-python\">\n# print(10 + [1, 2]) # จะเกิด TypeError\n            </code></pre>\n             <pre class=\"code-output\">\nTypeError: unsupported operand type(s) for +: \'int\' and \'list\'\n            </pre>\n             <pre><code class=\"language-python\">\n# print(10 / 0) # จะเกิด ZeroDivisionError\n            </code></pre>\n             <pre class=\"code-output\">\nZeroDivisionError: division by zero\n            </pre>\n        </div>\n\n        <h2>6. Input and Output (การรับข้อมูลและการแสดงผล)</h2>\n        <p><strong><code>print()</code>:</strong> แสดงผล <br> <strong><code>input()</code>:</strong> รับข้อมูลจากผู้ใช้ทางคีย์บอร์ด (ได้ String เสมอ)</p>\n\n        <h4>โค้ดตัวอย่าง: Input/Output</h4>\n        <pre><code>\nprint(\"แสดงผลหลายอย่าง:\", 123, True)\nprint(\"แสดงผลโดยใช้ sep=\'-\'\", \"A\", \"B\", \"C\", sep=\"-\") # กำหนดตัวคั่น\nprint(\"แสดงผลโดยไม่ขึ้นบรรทัดใหม่\", end=\" \") # กำหนดท้ายบรรทัด\nprint(\"ในบรรทัดเดียวกัน\")\n\nuser_name = input(\"กรุณาป้อนชื่อ: \")\nprint(\"สวัสดี,\", user_name)\n\n# รับตัวเลขต้องแปลง\nbirth_year_str = input(\"ป้อนปีเกิด: \")\ncurrent_year = 2024\ntry:\n    birth_year = int(birth_year_str)\n    age = current_year - birth_year\n    print(f\"คุณอายุประมาณ {age} ปี\")\nexcept ValueError:\n    print(\"ปีเกิดไม่ถูกต้อง เป็นตัวเลขไม่ได้\")\n        </code></pre>\n\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nแสดงผลหลายอย่าง: 123 True\nแสดงผลโดยใช้ sep=\'-\' A-B-C\nแสดงผลโดยไม่ขึ้นบรรทัดใหม่ ในบรรทัดเดียวกัน\nกรุณาป้อนชื่อ: <span class=\"code-comment\"># ผู้ใช้พิมพ์ Alice แล้ว Enter</span>\nสวัสดี, Alice\nป้อนปีเกิด: <span class=\"code-comment\"># ผู้ใช้พิมพ์ 2540 แล้ว Enter</span>\nคุณอายุประมาณ 27 ปี\n<span class=\"code-comment\"># --- ลองรันอีกครั้ง แต่ป้อนข้อมูลผิด ---</span>\nป้อนปีเกิด: <span class=\"code-comment\"># ผู้ใช้พิมพ์ hello แล้ว Enter</span>\nปีเกิดไม่ถูกต้อง เป็นตัวเลขไม่ได้\n        </div>\n         <p><strong>คำอธิบาย:</strong> <code>print()</code> ปรับการแสดงผลได้ <code>input()</code> ได้ String เสมอ ต้องระวัง <code>ValueError</code> เมื่อแปลงชนิดข้อมูลที่ผู้ใช้ป้อน</p>\n\n\n        <h2>7. Control Flow: การตัดสินใจ (Conditional Statements)</h2>\n        <p>ใช้ <code>if</code>, <code>elif</code>, <code>else</code> เพื่อให้โปรแกรมเลือกทำตามเงื่อนไข</p>\n\n        <h4>โค้ดตัวอย่าง: if, elif, else</h4>\n        <pre><code>\nscore = 75\n\nif score >= 90:\n    print(\"เกรด A\")\nelif score >= 80:\n    print(\"เกรด B\")\nelif score >= 70: # เงื่อนไขนี้เป็นจริง\n    print(\"เกรด C\")\nelse:\n    print(\"เกรด D\")\n\nprint(\"จบการตัดสินใจ\")\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nเกรด C\nจบการตัดสินใจ\n        </div>\n\n         <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>IndentationError:</strong> ข้อผิดพลาดที่พบบ่อยที่สุดใน Python เกิดจากการเว้นวรรคย่อหน้าไม่ถูกต้อง เพื่อบอกขอบเขต Block ของโค้ด</li>\n                <li><strong>SyntaxError:</strong> ลืมเครื่องหมาย <code>:</code> หลังเงื่อนไข <code>if</code>, <code>elif</code>, <code>else</code> หรือสะกดคำหลักผิด</li>\n            </ul>\n            <strong>ตัวอย่าง Error:</strong>\n            <pre><code class=\"language-python\">\nif True:\nprint(\"ทำอะไรสักอย่าง\") <span class=\"code-comment\"># Indentation ผิด</span>\n            </code></pre>\n             <pre class=\"code-output\">\nIndentationError: expected an indented block\n            </pre>\n             <pre><code class=\"language-python\">\nif False <span class=\"code-comment\"># ลืม :</span>\n    print(\"จะไม่รัน\")\n            </code></pre>\n             <pre class=\"code-output\">\nSyntaxError: expected \':\'\n            </pre>\n        </div>\n\n\n        <h2>8. Control Flow: การวนซ้ำ (Loops)</h2>\n        <p>ใช้ <code>for</code> และ <code>while</code> ทำคำสั่งซ้ำๆ</p>\n\n        <h4>โค้ดตัวอย่าง: for Loop</h4>\n        <pre><code>\n# วนตามจำนวนครั้งด้วย range()\nprint(\"นับเลขด้วย for:\")\nfor i in range(3): # i จะมีค่า 0, 1, 2\n    print(i)\n\n# วนผ่านสมาชิกใน List\nfruits = [\"apple\", \"banana\"]\nprint(\"\\nผลไม้ในตะกร้า:\")\nfor fruit in fruits:\n    print(fruit)\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nนับเลขด้วย for:\n0\n1\n2\n\nผลไม้ในตะกร้า:\napple\nbanana\n        </div>\n\n        <h4>โค้ดตัวอย่าง: while Loop</h4>\n        <pre><code>\ncount = 0\nwhile count &lt; 3:\n    print(\"รอบที่:\", count)\n    count += 1 # อย่าลืมอัปเดตตัวแปรเงื่อนไข!\n\nprint(\"จบ while loop\")\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nรอบที่: 0\nรอบที่: 1\nรอบที่: 2\nจบ while loop\n        </div>\n\n         <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>Infinite Loop:</strong> ใน <code>while</code> loop หากเงื่อนไขเป็น <code>True</code> ตลอดเวลาและไม่เคยกลายเป็น <code>False</code> Loop จะทำงานไม่รู้จบ (กด Ctrl+C ใน Terminal เพื่อหยุด) มักเกิดจากการลืมอัปเดตตัวแปรในเงื่อนไข</li>\n                <li><strong>IndentationError:</strong> เหมือนกับ if/else, โค้ดใน Block ของ Loop ต้องมี Indentation ถูกต้อง</li>\n                <li><strong>SyntaxError:</strong> ลืม <code>:</code> หลังเงื่อนไข Loop</li>\n            </ul>\n            <strong>ตัวอย่าง Error:</strong>\n            <pre><code class=\"language-python\">\n# count = 0\n# while count &lt; 3:\n#     print(\"อันตราย!\") # ลืม count += 1 จะวนไม่รู้จบ!\n            </code></pre>\n             <pre class=\"code-output\">\nอันตราย!\nอันตราย!\nอันตราย!\n... (รันไปเรื่อยๆ ไม่มีที่สิ้นสุด)\n            </pre>\n        </div>\n\n\n        <h2>9. Basic Data Structures (โครงสร้างข้อมูลเบื้องต้น)</h2>\n        <p>ใช้เก็บข้อมูลหลายๆ ค่าในรูปแบบต่างๆ</p>\n\n        <h4>List (รายการ) - mutable (เปลี่ยนแปลงได้)</h4>\n        <p>ลำดับข้อมูล ใช้ <code>[]</code> เข้าถึงสมาชิกด้วย Index (เริ่มจาก 0)</p>\n        <pre><code>\nmy_list = [10, \"hello\", True]\nprint(\"List ทั้งหมด:\", my_list)\nprint(\"สมาชิกตัวแรก:\", my_list[0])\nprint(\"สมาชิกตัวสุดท้าย:\", my_list[-1]) # Index ติดลบก็นับจากท้าย\n\nmy_list.append(99) # เพิ่มสมาชิกท้ายสุด\nmy_list[0] = 100   # เปลี่ยนค่าสมาชิก\nprint(\"List หลังเปลี่ยน:\", my_list)\n\n# Slicing: list[start:stop:step] (ไม่รวม stop)\nprint(\"Slice 1 ถึง 2 (ไม่รวม 3):\", my_list[1:3]) # output: [\'hello\', True]\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nList ทั้งหมด: [10, \'hello\', True]\nสมาชิกตัวแรก: 10\nสมาชิกตัวสุดท้าย: True\nList หลังเปลี่ยน: [100, \'hello\', True, 99]\nSlice 1 ถึง 2 (ไม่รวม 3): [\'hello\', True]\n        </div>\n\n        <h4>String (ข้อความ) - immutable (เปลี่ยนแปลงไม่ได้)</h4>\n        <p>ลำดับตัวอักษร ใช้ <code>\" \"</code> หรือ <code>\' \'</code> เข้าถึงตัวอักษรด้วย Index, Slicing ได้ แต่เปลี่ยนค่าไม่ได้</p>\n         <pre><code>\nmy_string = \"Python\"\nprint(\"String:\", my_string)\nprint(\"ตัวอักษรตัวแรก:\", my_string[0])\nprint(\"Slice 1 ถึง 3 (ไม่รวม 4):\", my_string[1:4]) # output: \'yth\'\nprint(\"String เป็นพิมพ์ใหญ่:\", my_string.upper()) # เมธอดจะคืนค่า String ใหม่\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nString: Python\nตัวอักษรตัวแรก: P\nSlice 1 ถึง 3 (ไม่รวม 4): yth\nString เป็นพิมพ์ใหญ่: PYTHON\n        </div>\n\n        <h4>Tuple (ทูเปิล) - immutable (เปลี่ยนแปลงไม่ได้)</h4>\n        <p>ลำดับข้อมูล ใช้ <code>()</code> คล้าย List แต่เปลี่ยนค่าสมาชิกไม่ได้</p>\n        <pre><code>\nmy_tuple = (1, 2, \"three\")\nprint(\"Tuple ทั้งหมด:\", my_tuple)\nprint(\"สมาชิกตัวที่สอง:\", my_tuple[1])\n# my_tuple[0] = 100 # บรรทัดนี้จะ Error\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nTuple ทั้งหมด: (1, 2, \'three\')\nสมาชิกตัวที่สอง: 2\n        </div>\n\n        <h4>Dictionary (พจนานุกรม) - mutable (เปลี่ยนแปลงได้)</h4>\n        <p>เก็บข้อมูลแบบ Key-Value Pairs ใช้ <code>{}</code> เข้าถึงค่าด้วย Key</p>\n         <pre><code>\nperson = {\"name\": \"Bob\", \"age\": 25, \"city\": \"London\"}\nprint(\"Dictionary:\", person)\nprint(\"ชื่อ:\", person[\"name\"])\nprint(\"อายุ:\", person.get(\"age\")) # อีกวิธีในการเข้าถึงค่า\n\nperson[\"age\"] = 26      # เปลี่ยนค่า\nperson[\"country\"] = \"UK\" # เพิ่ม Key-Value ใหม่\nprint(\"Dictionary หลังเปลี่ยน/เพิ่ม:\", person)\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nDictionary: {\'name\': \'Bob\', \'age\': 25, \'city\': \'London\'}\nชื่อ: Bob\nอายุ: 25\nDictionary หลังเปลี่ยน/เพิ่ม: {\'name\': \'Bob\', \'age\': 26, \'city\': \'London\', \'country\': \'UK\'}\n        </div>\n\n\n         <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>IndexError:</strong> เมื่อเข้าถึงสมาชิก List หรือ Tuple ด้วย Index ที่อยู่นอกขอบเขต</li>\n                <li><strong>TypeError:</strong> เมื่อพยายามแก้ไข String หรือ Tuple</li>\n                <li><strong>KeyError:</strong> เมื่อเข้าถึงค่าใน Dictionary ด้วย Key ที่ไม่มีอยู่ (ใช้ <code>.get()</code> แทน <code>[]</code> เพื่อเลี่ยง Error เมื่อ Key ไม่มี - มันจะคืนค่าเป็น None แทน)</li>\n            </ul>\n            <strong>ตัวอย่าง Error:</strong>\n            <pre><code class=\"language-python\">\nmy_list = [1, 2]\n# print(my_list[2]) # จะเกิด IndexError\n\nmy_string = \"abc\"\n# my_string[0] = \'x\' # จะเกิด TypeError\n\nmy_dict = {\"a\": 1}\n# print(my_dict[\"b\"]) # จะเกิด KeyError\n            </code></pre>\n             <pre class=\"code-output\">\nIndexError: list index out of range\nTypeError: \'str\' object does not support item assignment\nKeyError: \'b\'\n            </pre>\n        </div>\n\n\n        <h2>10. Functions (ฟังก์ชัน)</h2>\n        <p>กลุ่มคำสั่งที่นำกลับมาใช้ซ้ำได้ ใช้ <code>def</code> ประกาศ</p>\n\n        <h4>โค้ดตัวอย่าง: Function</h4>\n        <pre><code>\n# ฟังก์ชันไม่มี parameter, ไม่มี return\ndef say_greeting():\n    print(\"Hello from function!\")\n\n# ฟังก์ชันมี parameter\ndef greet(name):\n    print(f\"สวัสดี, {name}!\")\n\n# ฟังก์ชันมี parameter และ return ค่า\ndef add(x, y):\n    sum_result = x + y\n    return sum_result # คืนค่าผลลัพธ์\n\n# เรียกใช้งานฟังก์ชัน\nsay_greeting()\ngreet(\"Alice\")\n\nresult = add(10, 5)\nprint(\"ผลบวก:\", result)\n\nprint(\"ผลบวกโดยตรง:\", add(2, 3)) # เรียกใช้แล้ว print ค่าที่ return ทันที\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nHello from function!\nสวัสดี, Alice!\nผลบวก: 15\nผลบวกโดยตรง: 5\n        </div>\n\n         <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>NameError:</strong> เมื่อเรียกใช้ฟังก์ชันที่ไม่ได้ประกาศ หรือพยายามเข้าถึงตัวแปร Local ภายในฟังก์ชันจากภายนอก</li>\n                <li><strong>TypeError:</strong> เมื่อเรียกใช้ฟังก์ชันพร้อมจำนวน Argument ไม่ถูกต้อง</li>\n                <li><strong>ค่าที่คืนกลับ:</strong> หากฟังก์ชันไม่มีคำสั่ง <code>return</code> จะคืนค่า <code>None</code> โดยอัตโนมัติ</li>\n            </ul>\n            <strong>ตัวอย่าง Error:</strong>\n            <pre><code class=\"language-python\">\n# my_function() # จะเกิด NameError ถ้าไม่ได้ประกาศ my_function\n\ndef my_function():\n    local_var = 10\n# print(local_var) # จะเกิด NameError\n\ndef add(x, y):\n    return x + y\n# add(10) # จะเกิด TypeError เพราะส่ง Argument ไม่ครบ\n            </code></pre>\n             <pre class=\"code-output\">\nNameError: name \'my_function\' is not defined\nNameError: name \'local_var\' is not defined\nTypeError: add() missing 1 required positional argument: \'y\'\n            </pre>\n        </div>\n\n        <h2>11. การจัดการข้อผิดพลาดเบื้องต้น (Exception Handling)</h2>\n        <p>ใช้ <code>try...except</code> เพื่อดักจับข้อผิดพลาดที่อาจเกิดขึ้นระหว่างโปรแกรมทำงาน</p>\n\n        <h4>โค้ดตัวอย่าง: try...except</h4>\n        <pre><code>\ntry:\n    # โค้ดใน try อาจทำให้เกิด Error\n    num_str = input(\"ป้อนตัวเลข: \")\n    num = int(num_str) # อาจเกิด ValueError\n    result = 10 / num    # อาจเกิด ZeroDivisionError\n\n    print(\"ผลลัพธ์ 10 /\", num, \"=\", result)\n\nexcept ValueError:\n    # ทำงานเมื่อเกิด ValueError ใน try block\n    print(\"ข้อมูลที่ป้อนไม่ถูกต้อง ไม่ใช่ตัวเลข!\")\n\nexcept ZeroDivisionError:\n    # ทำงานเมื่อเกิด ZeroDivisionError ใน try block\n    print(\"ไม่สามารถหารด้วยศูนย์ได้!\")\n\nprint(\"โปรแกรมทำงานส่วนต่อไป...\")\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nป้อนตัวเลข: <span class=\"code-comment\"># ผู้ใช้พิมพ์ hello</span>\nข้อมูลที่ป้อนไม่ถูกต้อง ไม่ใช่ตัวเลข!\nโปรแกรมทำงานส่วนต่อไป...\n<span class=\"code-comment\"># --- ลองรันอีกครั้ง แต่ป้อน 0 ---</span>\nป้อนตัวเลข: <span class=\"code-comment\"># ผู้ใช้พิมพ์ 0</span>\nไม่สามารถหารด้วยศูนย์ได้!\nโปรแกรมทำงานส่วนต่อไป...\n<span class=\"code-comment\"># --- ลองรันอีกครั้ง แต่ป้อนตัวเลขถูกต้อง ---</span>\nป้อนตัวเลข: <span class=\"code-comment\"># ผู้ใช้พิมพ์ 5</span>\nผลลัพธ์ 10 / 5 = 2.0\nโปรแกรมทำงานส่วนต่อไป...\n        </div>\n        <p><strong>คำอธิบาย:</strong> <code>try</code> คือส่วนที่ลองทำ ถ้าเกิด Error ที่ระบุใน <code>except</code> โปรแกรมจะไปทำใน Block ของ <code>except</code> นั้นแทนที่จะ Crash</p>\n\n        <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>ถ้าไม่ใช้ try...except:</strong> โปรแกรมจะหยุดทำงานและแสดง Traceback ทันทีเมื่อเกิด Exception</li>\n                <li>การใช้ <code>except Exception:</code> เฉยๆ (ดักจับทุก Error) อาจทำให้มองไม่เห็น Error ที่คาดไม่ถึงซึ่งควรได้รับการแก้ไข <span class=\"code-comment\">(อธิบายละเอียดขึ้นในหัวข้อ Exception Handling โดยเฉพาะ)</span></li>\n            </ul>\n        </div>\n\n        <h2>12. Modules (โมดูล) และ Libraries (ไลบรารี) เบื้องต้น</h2>\n        <p>โมดูลคือไฟล์ Python ที่มีโค้ดต่างๆ ที่นำกลับมาใช้ซ้ำได้ ไลบรารีคือกลุ่มของโมดูล <br> ใช้ <code>import</code> เพื่อนำโมดูลมาใช้</p>\n\n        <h4>โค้ดตัวอย่าง: Modules</h4>\n        <pre><code>\nimport math # นำเข้าโมดูล math\n\n# ใช้ฟังก์ชันจากโมดูล math\nradius = 5\narea = math.pi * (radius ** 2) # math.pi คือค่า Pi ในโมดูล math\nprint(\"พื้นที่วงกลม:\", area)\n\n# นำเข้าเฉพาะบางอย่าง\nfrom random import randint # นำเข้าเฉพาะฟังก์ชัน randint จากโมดูล random\nrandom_num = randint(1, 10) # ใช้ randint ได้โดยตรง\nprint(\"เลขสุ่ม 1-10:\", random_num)\n\n# นำเข้าโดยตั้งชื่อใหม่ (Alias)\nimport numpy as np # นิยมสำหรับ NumPy\nmy_array = np.array([1, 2, 3])\nprint(\"Array จาก NumPy:\", my_array)\n        </code></pre>\n         <h4>ผลลัพธ์จากการรันโค้ด (จำลอง)</h4>\n        <div class=\"code-output\">\nพื้นที่วงกลม: 78.53981633974483\nเลขสุ่ม 1-10: <span class=\"code-comment\"># ค่าจะเป็นเลขสุ่มระหว่าง 1 ถึง 10 เช่น 7</span>\nArray จาก NumPy: [1 2 3]\n        </div>\n\n         <h4>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอ</h4>\n        <div class=\"warning\">\n            <strong>ระวัง:</strong>\n            <ul>\n                <li><strong>ModuleNotFoundError:</strong> เมื่อพยายาม import โมดูลที่ยังไม่ได้ติดตั้ง หรือสะกดชื่อโมดูลผิด</li>\n                <li><strong>AttributeError:</strong> เมื่อพยายามเข้าถึงฟังก์ชัน ตัวแปร หรือคลาสที่ไม่มีอยู่ในโมดูลนั้น (เช่น <code>math.square(4)</code> - ไม่มีฟังก์ชัน square ใน math)</li>\n            </ul>\n            <strong>ตัวอย่าง Error:</strong>\n            <pre><code class=\"language-python\">\n# import non_existent_module # จะเกิด ModuleNotFoundError\n            </code></pre>\n             <pre class=\"code-output\">\nModuleNotFoundError: No module named \'non_existent_module\'\n            </pre>\n             <pre><code class=\"language-python\">\nimport math\n# print(math.square(4)) # จะเกิด AttributeError\n            </code></pre>\n             <pre class=\"code-output\">\nAttributeError: module \'math\' has no attribute \'square\'. Did you mean: \'sqrt\'?\n            </pre>\n        </div>\n\n        <hr>\n\n        <h2>บทสรุปและก้าวต่อไป</h2>\n        <p>คุณได้เรียนรู้พื้นฐาน Python อย่างละเอียด พร้อมได้เห็นโค้ด การรัน ข้อผิดพลาด และสิ่งที่ต้องระวังแล้ว:</p>\n        <ul>\n            <li><strong>Syntax:</strong> การเขียนโค้ด, Indentation, Comments</li>\n            <li><strong>Variables &amp; Data Types:</strong> เก็บข้อมูลชนิดต่างๆ, การแปลงชนิด</li>\n            <li><strong>Operators:</strong> การคำนวณ, เปรียบเทียบ, ตรรกะ</li>\n            <li><strong>Input/Output:</strong> รับ/แสดงข้อมูล</li>\n            <li><strong>Control Flow:</strong> ตัดสินใจ (if/else), วนซ้ำ (for/while), ควบคุม Loop (break/continue)</li>\n            <li><strong>Data Structures:</strong> List, String, Tuple, Dictionary และข้อควรระวังเฉพาะตัว</li>\n            <li><strong>Functions:</strong> สร้าง/เรียกใช้โค้ดที่นำกลับมาใช้ซ้ำ</li>\n            <li><strong>Error Handling:</strong> จัดการ Error เบื้องต้นด้วย try...except</li>\n            <li><strong>Modules:</strong> นำเข้าโค้ดจากไลบรารีอื่น</li>\n        </ul>\n\n        <p><strong>สิ่งสำคัญที่สุดคือ \"การลงมือเขียนโค้ด\" และ \"การลองทำให้เกิด Error แล้วแก้\"</strong> ครับ ลองใช้สิ่งที่ได้เรียนรู้ไปเขียนโปรแกรมเล็กๆ ดูนะครับ เช่น เครื่องคิดเลขง่ายๆ, โปรแกรมสุ่มทายตัวเลข, โปรแกรมจัดการ List หรือ Dictionary ง่ายๆ การลองผิดลองถูกจะช่วยให้คุณเข้าใจและจดจำได้ดียิ่งขึ้น</p>\n        <p>หัวข้อเหล่านี้คือรากฐานที่แข็งแกร่งสำหรับหัวข้ออื่นๆ ที่เราจะเรียนรู้ต่อไป เช่น OOP, Decorators, Generators, NumPy, Pandas, Matplotlib และ Machine Learning ครับ</p>\n        <p>ขอให้สนุกกับการเขียนโค้ด Python นะครับ!</p>\n\n    </div>', 1),
(2, 1, 'Data Types และ Variables', ' <style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3 {\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2px solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>ชนิดข้อมูล (Data Types) และ ตัวแปร (Variables) ใน Python</h1>\n\n        <p>ในการเขียนโปรแกรม เราต้องมีการเก็บข้อมูลเพื่อนำไปประมวลผล ซึ่ง \"ตัวแปร\" และ \"ชนิดข้อมูล\" คือสองสิ่งที่ทำงานร่วมกันเพื่อทำหน้าที่นี้</p>\n\n        <h2>ตัวแปร (Variables)</h2>\n        <p>ลองนึกภาพว่าตัวแปรเป็นเหมือน \"กล่อง\" ที่เราสร้างขึ้นในหน่วยความจำของคอมพิวเตอร์ เพื่อใช้เก็บข้อมูลต่างๆ แล้วเราก็ตั้งชื่อ \"กล่อง\" นั้น เพื่อให้ง่ายต่อการเรียกใช้งานหรือเปลี่ยนแปลงข้อมูลภายใน</p>\n\n        <h3>การสร้างและกำหนดค่าตัวแปร</h3>\n        <p>ใน Python การสร้างตัวแปรและการกำหนดค่าทำได้ง่ายๆ ด้วยเครื่องหมาย <code>=</code>:</p>\n        <pre><code>\n# สร้างตัวแปรชื่อ \'age\' และกำหนดค่าเป็น 30\nage = 30\n\n# สร้างตัวแปรชื่อ \'name\' และกำหนดค่าเป็นข้อความ \"Alice\"\nname = \"Alice\"\n\n# สร้างตัวแปรชื่อ \'is_student\' และกำหนดค่าเป็นค่าความจริง True\nis_student = True\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong></p>\n        <ul>\n            <li><code>age = 30</code> : นี่คือการใช้ <strong>Assignment Operator</strong> (<code>=</code>) เพื่อกำหนดค่า <code>30</code> ให้กับตัวแปรชื่อ <code>age</code></li>\n            <li><code>name = \"Alice\"</code> : กำหนดค่าข้อความ <code>\"Alice\"</code> ให้กับตัวแปรชื่อ <code>name</code></li>\n            <li><code>is_student = True</code> : กำหนดค่าความจริง <code>True</code> ให้กับตัวแปรชื่อ <code>is_student</code></li>\n        </ul>\n        <p>สังเกตว่าเราไม่ต้องบอก Python ล่วงหน้าว่าตัวแปร <code>age</code> จะเก็บตัวเลข หรือ <code>name</code> จะเก็บข้อความ นี่คือคุณสมบัติที่เรียกว่า <strong>Dynamic Typing</strong> ใน Python โปรแกรมจะรู้ชนิดข้อมูลของตัวแปรตามค่าที่เรากำหนดให้ ณ ตอนนั้น</p>\n\n        <h3>กฎการตั้งชื่อตัวแปร</h3>\n        <p>มีกฎและแนวปฏิบัติ (Convention) ในการตั้งชื่อตัวแปรใน Python ดังนี้:</p>\n        <ul>\n            <li>ชื่อต้องขึ้นต้นด้วยตัวอักษร (A-Z, a-z) หรือเครื่องหมายขีดล่าง (<code>_</code>) เท่านั้น</li>\n            <li>ส่วนที่เหลือของชื่อสามารถเป็นตัวอักษร, ตัวเลข (0-9), หรือเครื่องหมายขีดล่างได้</li>\n            <li>ชื่อตัวแปร <strong>Case-sensitive</strong> หมายถึง ตัวพิมพ์ใหญ่และเล็กมีความแตกต่างกัน เช่น <code>age</code> ไม่เหมือนกับ <code>Age</code></li>\n            <li>ห้ามใช้คำสงวน (Keywords) ของ Python เป็นชื่อตัวแปร (เช่น <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>def</code>, <code>import</code>, <code>True</code>, <code>False</code>, <code>None</code> ฯลฯ)</li>\n            <li><strong>แนวปฏิบัติ:</strong> ควรใช้ชื่อที่สื่อความหมาย และนิยมใช้รูปแบบ <strong>snake_case</strong> คือใช้ตัวพิมพ์เล็กทั้งหมดและใช้เครื่องหมายขีดล่างคั่นระหว่างคำ เช่น <code>first_name</code>, <code>total_price</code></li>\n        </ul>\n         <pre><code>\n# ตัวอย่างชื่อตัวแปรที่ถูกต้อง\nmy_variable = 10\n_internal_var = 20\nnumber1 = 30\nuser_name = \"Bob\" # แนะนำให้ใช้แบบนี้ (snake_case)\n\n# ตัวอย่างชื่อตัวแปรที่ผิด (จะเกิด Syntax Error)\n# 1variable = 40 # ขึ้นต้นด้วยตัวเลข\n# my-variable = 50 # มีเครื่องหมาย \'-\'\n# class = 60 # เป็นคำสงวน\n\n# ตัวอย่างความแตกต่าง Case-sensitive\nmy_var = 100\nMy_Var = 200\nprint(my_var) # Output: 100\nprint(My_Var) # Output: 200\n        </code></pre>\n\n        <h2>ชนิดข้อมูล (Data Types)</h2>\n        <p>ชนิดข้อมูลบอกว่าข้อมูลที่ตัวแปรเก็บอยู่นั้นเป็นข้อมูลประเภทไหน เพื่อให้โปรแกรมรู้ว่าจะจัดการหรือประมวลผลข้อมูลนั้นอย่างไร Python มีชนิดข้อมูลพื้นฐานและชนิดข้อมูลสำหรับเก็บกลุ่มข้อมูลหลายๆ ค่า</p>\n\n        <h3>ชนิดข้อมูลพื้นฐาน (Primitive/Scalar Types)</h3>\n        <p>เป็นชนิดข้อมูลที่เก็บค่าเดียว:</p>\n        <ul>\n            <li><strong>Integer (<code>int</code>):</strong> จำนวนเต็ม ไม่ว่าจะเป็นบวก ลบ หรือศูนย์ ไม่มีจุดทศนิยม</li>\n            <pre><code>\nnum_students = 50\nyear = -2023\nzero_value = 0\nprint(type(num_students)) # Output: &lt;class \'int\'&gt;\n            </code></pre>\n\n            <li><strong>Floating-Point Number (<code>float</code>):</strong> จำนวนจริงที่มีจุดทศนิยม</li>\n            <pre><code>\npi = 3.14159\nprice = 99.99\ntemperature = -5.0\nprint(type(price)) # Output: &lt;class \'float\'&gt;\n            </code></pre>\n\n            <li><strong>String (<code>str</code>):</strong> ข้อความ หรือลำดับของตัวอักษร สามารถใช้อยู่ในเครื่องหมาย <code>\" \"</code> หรือ <code>\' \'</code> ก็ได้ และใช้ <code>\"\"\" \"\"\"</code> หรือ <code>\'\'\' \'\'\'</code> สำหรับข้อความหลายบรรทัด</li>\n            <pre><code>\nname = \"Somsak\"\ngreeting = \'Hello\'\nmessage = \"\"\"This is a\nmulti-line string.\"\"\"\nprint(type(name)) # Output: &lt;class \'str\'&gt;\n            </code></pre>\n\n            <li><strong>Boolean (<code>bool</code>):</strong> ค่าความจริง มีเพียงสองค่าคือ <code>True</code> และ <code>False</code> (ตัวอักษรแรกต้องเป็นพิมพ์ใหญ่) ใช้ในเงื่อนไขและการเปรียบเทียบ</li>\n             <pre><code>\nis_finished = True\nhas_error = False\nprint(type(is_finished)) # Output: &lt;class \'bool\'&gt;\n             </code></pre>\n\n             <li><strong>None Type (<code>NoneType</code>):</strong> ใช้แทนค่าว่าง หรือไม่มีค่า (absence of a value) แตกต่างจาก 0 หรือ String ว่างเปล่า</li>\n             <pre><code>\nresult = None\nprint(result) # Output: None\nprint(type(result)) # Output: &lt;class \'NoneType\'&gt;\n             </code></pre>\n             <p><strong>ข้อควรระวัง:</strong> <code>None</code> ไม่เท่ากับ <code>0</code>, <code>\'\'</code>, หรือ <code>[]</code> (empty list) การตรวจสอบว่าตัวแปรเป็น <code>None</code> หรือไม่ ให้ใช้ <code>is</code> แทน <code>==</code> เช่น <code>if result is None:</code></p>\n        </ul>\n\n        <h3>การตรวจสอบชนิดข้อมูลด้วย <code>type()</code></h3>\n        <p>เราใช้ฟังก์ชัน <code>type()</code> เพื่อดูว่าตัวแปรหรือค่าที่เราสนใจมีชนิดข้อมูลอะไร</p>\n        <pre><code>\nmy_int = 10\nmy_float = 3.14\nmy_string = \"Python\"\nmy_bool = False\n\nprint(type(my_int))\nprint(type(my_float))\nprint(type(my_string))\nprint(type(my_bool))\n        </code></pre>\n         <p><strong>Output ที่ได้:</strong></p>\n         <pre><code>\n&lt;class \'int\'&gt;\n&lt;class \'float\'&gt;\n&lt;class \'str\'&gt;\n&lt;class \'bool\'&gt;\n         </code></pre>\n\n\n        <h3>การแปลงชนิดข้อมูล (Type Conversion หรือ Type Casting)</h3>\n        <p>บางครั้งเราจำเป็นต้องแปลงชนิดข้อมูลจากแบบหนึ่งไปเป็นอีกแบบหนึ่ง เช่น เมื่อรับข้อมูลจากผู้ใช้ด้วย <code>input()</code> ซึ่งเป็น String เสมอ แต่ต้องการนำไปคำนวณ เราก็ต้องแปลงเป็นตัวเลขก่อน</p>\n        <p>Python มีฟังก์ชัน Built-in สำหรับแปลงชนิดข้อมูลหลักๆ เช่น <code>int()</code>, <code>float()</code>, <code>str()</code>, <code>bool()</code></p>\n        <pre><code>\n# แปลง String เป็น Integer หรือ Float\nnum_str = \"123\"\nnum_int = int(num_str)      # แปลง string \"123\" เป็น int 123\nnum_float = float(num_str)  # แปลง string \"123\" เป็น float 123.0\n\nprint(f\"String \'{num_str}\' -&gt; int: {num_int} (Type: {type(num_int)})\")\nprint(f\"String \'{num_str}\' -&gt; float: {num_float} (Type: {type(num_float)})\")\n\n# แปลง Integer หรือ Float เป็น String\nint_val = 45\nfloat_val = 99.5\nstr_from_int = str(int_val)   # แปลง int 45 เป็น string \"45\"\nstr_from_float = str(float_val) # แปลง float 99.5 เป็น string \"99.5\"\n\nprint(f\"Int {int_val} -&gt; string: \'{str_from_int}\' (Type: {type(str_from_int)})\")\nprint(f\"Float {float_val} -&gt; string: \'{str_from_float}\' (Type: {type(str_from_float)})\")\n\n# แปลงเป็น Boolean\nprint(f\"bool(0): {bool(0)}\")         # Output: False (0 ถือเป็น False)\nprint(f\"bool(10): {bool(10)}\")        # Output: True (จำนวนอื่นที่ไม่ใช่ 0 ถือเป็น True)\nprint(f\"bool(\'\'): {bool(\'\')}\")         # Output: False (String ว่างเปล่า ถือเป็น False)\nprint(f\"bool(\'Hello\'): {bool(\'Hello\')}\") # Output: True (String ที่ไม่ว่างเปล่า ถือเป็น True)\nprint(f\"bool([]): {bool([])}\")         # Output: False (List ว่างเปล่า ถือเป็น False)\nprint(f\"bool([1, 2]): {bool([1, 2])}\")  # Output: True (List ที่ไม่ว่างเปล่า ถือเป็น True)\nprint(f\"bool(None): {bool(None)}\")       # Output: False (None ถือเป็น False)\n        </code></pre>\n        <p><strong>ข้อควรระวัง:</strong> การแปลงชนิดข้อมูลอาจไม่สำเร็จและทำให้เกิด Error ได้ หากข้อมูลไม่สามารถแปลงไปเป็นชนิดที่ต้องการได้ เช่น การแปลงข้อความ \"hello\" ให้เป็น Integer จะเกิด <code>ValueError</code></p>\n\n        <h3>ชนิดข้อมูลสำหรับเก็บกลุ่มข้อมูล (Collection/Container Types)</h3>\n        <p>นอกจากชนิดข้อมูลพื้นฐานที่กล่าวมา Python ยังมีชนิดข้อมูลที่ใช้เก็บค่าหลายๆ ค่าเข้าด้วยกัน เช่น:</p>\n        <ul>\n            <li><strong>List (รายการ):</strong> ลำดับของข้อมูลที่เปลี่ยนแปลงได้ <code>[]</code></li>\n            <li><strong>Tuple (ทูเปิล):</strong> ลำดับของข้อมูลที่เปลี่ยนแปลงไม่ได้ <code>()</code></li>\n            <li><strong>Dictionary (พจนานุกรม):</strong> การเก็บข้อมูลแบบ Key-Value Pairs <code>{}</code></li>\n            <li><strong>Set (เซ็ต):</strong> กลุ่มของสมาชิกที่ไม่ซ้ำกันและไม่มีลำดับ <code>{}</code> (คล้าย Dict แต่มีแค่ Key)</li>\n        </ul>\n        <p>เราจะลงรายละเอียดเกี่ยวกับชนิดข้อมูลเหล่านี้ในหัวข้อถัดไปครับ</p>\n\n        <hr>\n\n        <h2>สรุปและฝึกฝน</h2>\n        <p>ตอนนี้คุณก็ได้รู้จักกับหัวใจหลักของการเก็บข้อมูลใน Python แล้ว คือ \"ตัวแปร\" ที่ใช้ตั้งชื่อกล่อง และ \"ชนิดข้อมูล\" ที่บอกว่าข้อมูลในกล่องนั้นเป็นอะไร (จำนวน, ข้อความ, ค่าความจริง ฯลฯ) รวมถึงการตั้งชื่อตัวแปรและการแปลงชนิดข้อมูล</p>\n        <p><strong>สิ่งสำคัญคือต้องฝึกใช้ตัวแปรและชนิดข้อมูลเหล่านี้ให้คล่อง</strong> ลองสร้างตัวแปรชนิดต่างๆ ขึ้นมา กำหนดค่า พิมพ์ค่าและชนิดข้อมูลออกมา ลองรับข้อมูลจากผู้ใช้แล้วแปลงชนิดข้อมูลเพื่อนำไปคำนวณดูนะครับ</p>\n        <p>หากมีคำถามหรือส่วนไหนไม่ชัดเจน ถามได้เลยครับ!</p>\n    </div>', 2);
INSERT INTO `lessons` (`lesson_id`, `course_id`, `title`, `content`, `order_number`) VALUES
(3, 1, 'Control Flow และ Functions', '<style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3 {\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2px solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>Control Flow และ Functions ใน Python</h1>\n\n        <p>โดยปกติแล้ว โปรแกรมจะทำงานตามคำสั่งจากบนลงล่างทีละบรรทัด แต่ในการเขียนโปรแกรมจริง เรามักจะต้องให้โปรแกรมทำงานแบบอื่น เช่น ตัดสินใจว่าจะทำหรือไม่ทำอะไรบางอย่าง หรือทำบางอย่างซ้ำๆ หลายๆ ครั้ง ส่วนนี้เราจะเรียนรู้เครื่องมือที่ใช้ในการควบคุมการทำงานของโปรแกรม หรือที่เรียกว่า <strong>Control Flow</strong></p>\n\n        <h2>Control Flow (การควบคุมการทำงานของโปรแกรม)</h2>\n\n        <h3>การตัดสินใจ (Decision Making): <code>if</code>, <code>elif</code>, <code>else</code></h3>\n        <p>ใช้เมื่อต้องการให้โปรแกรมเลือกทำงานใน Block โค้ดใด Block โค้ดหนึ่ง โดยพิจารณาจากเงื่อนไขว่าเป็น <code>True</code> หรือ <code>False</code></p>\n        <ul>\n            <li><code>if condition:</code> : ถ้า <code>condition</code> เป็น <code>True</code> ให้ทำโค้ดใน Block นี้</li>\n            <li><code>elif condition:</code> : ย่อมาจาก \"else if\" ถ้าเงื่อนไข <code>if</code> ก่อนหน้าเป็น <code>False</code> ให้มาตรวจสอบ <code>condition</code> ของ <code>elif</code> นี้แทน (สามารถมี <code>elif</code> ได้หลายตัว)</li>\n            <li><code>else:</code> : ถ้าทุกเงื่อนไข (ทั้ง <code>if</code> และ <code>elif</code> ที่มี) เป็น <code>False</code> ทั้งหมด ให้ทำโค้ดใน Block นี้ (<code>else</code> มีได้เพียงตัวเดียวและอยู่ท้ายสุด)</li>\n        </ul>\n        <p><strong>สิ่งสำคัญมาก:</strong> โค้ดที่อยู่ในแต่ละ Block (<code>if</code>, <code>elif</code>, <code>else</code>) จะต้องมี <strong>Indentation</strong> (การเว้นวรรคย่อหน้า) ที่เท่ากัน!</p>\n\n        <pre><code>\nscore = 85\n\nif score &gt;= 90:\n    print(\"ได้เกรด A\")\nelif score &gt;= 80:\n    print(\"ได้เกรด B\") # เงื่อนไขนี้เป็นจริง โปรแกรมจะทำงานใน Block นี้\nelif score &gt;= 70:\n    print(\"ได้เกรด C\")\nelse:\n    print(\"ได้เกรด D\")\n\nprint(\"จบการประเมินเกรด\") # บรรทัดนี้มี Indentation เท่ากับ if, elif, else จึงอยู่นอก Block ตัดสินใจ\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> โปรแกรมจะตรวจสอบเงื่อนไขตั้งแต่ <code>if</code> ลงมา ถ้าเงื่อนไขใดเป็นจริง จะเข้าไปทำงานใน Block นั้น แล้วข้าม Block <code>elif</code> และ <code>else</code> ที่เหลือไปทำงานต่อจาก Block การตัดสินใจทั้งหมด</p>\n\n        <h3>การวนซ้ำ (Loops): <code>for</code> และ <code>while</code></h3>\n        <p>ใช้เมื่อต้องการให้โปรแกรมทำคำสั่งชุดเดิมซ้ำๆ กันหลายๆ ครั้ง</p>\n\n        <h4><code>for</code> Loop</h4>\n        <p>ใช้สำหรับวนซ้ำสมาชิกแต่ละตัวในลำดับ (Sequence) เช่น List, String, Tuple หรือวนซ้ำตามจำนวนครั้งที่กำหนดโดยใช้ฟังก์ชัน <code>range()</code></p>\n        <pre><code>\n# ตัวอย่าง for loop วนซ้ำตามจำนวนครั้ง (จาก 0 ถึง 4)\nprint(\"นับเลข 0-4:\")\nfor i in range(5): # range(5) จะสร้างลำดับ [0, 1, 2, 3, 4]\n    print(i)\n\n# ตัวอย่าง for loop วนซ้ำสมาชิกใน List\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"\\nรายการผลไม้:\")\nfor fruit in fruits:\n    print(fruit)\n\n# ตัวอย่าง for loop วนซ้ำตัวอักษรใน String\ngreeting = \"Hello\"\nprint(\"\\nตัวอักษรในคำว่า Hello:\")\nfor char in greeting:\n    print(char)\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> คำสั่ง <code>for variable in sequence:</code> จะกำหนดค่าสมาชิกแต่ละตัวใน <code>sequence</code> ให้กับ <code>variable</code> ในแต่ละรอบการวนซ้ำ</p>\n\n        <h4><code>while</code> Loop</h4>\n        <p>ใช้สำหรับวนซ้ำตราบใดที่เงื่อนไข (Condition) ยังเป็น <code>True</code> โปรแกรมจะตรวจสอบเงื่อนไขก่อนที่จะเริ่มวนซ้ำแต่ละรอบ</p>\n         <pre><code>\ncount = 0\n# วนซ้ำตราบใดที่ค่าของ count น้อยกว่า 5\nwhile count &lt; 5:\n    print(\"นับครั้งที่:\", count)\n    count = count + 1 # หรือเขียนย่อๆ ว่า count += 1\n    # ****** สิ่งสำคัญมาก: ต้องมีคำสั่งที่ทำให้เงื่อนไขเป็น False ในที่สุด\n    # ****** ไม่งั้นจะกลายเป็น Infinite Loop (วนซ้ำไม่รู้จบ)\n\nprint(\"จบการนับ\")\n         </code></pre>\n        <p><strong>คำอธิบาย:</strong> `while` loop เหมาะกับกรณีที่เราไม่รู้จำนวนรอบที่แน่นอน แต่รู้ว่าต้องวนซ้ำเมื่อไหร่ถึงจะหยุด</p>\n\n        <h3>คำสั่งควบคุม Loop: <code>break</code> และ <code>continue</code></h3>\n        <p>คำสั่งเหล่านี้ใช้ควบคุมพฤติกรรมของ Loop ระหว่างที่กำลังวนซ้ำ</p>\n        <ul>\n            <li><code>break</code>: ใช้สำหรับ \"กระโดด\" ออกจาก Loop นั้นๆ ทันที ไม่ว่าเงื่อนไข Loop จะยังเป็นจริงอยู่หรือไม่ก็ตาม</li>\n            <li><code>continue</code>: ใช้สำหรับ \"ข้าม\" การทำงานส่วนที่เหลือในรอบปัจจุบันของ Loop แล้วไปเริ่มการวนซ้ำรอบถัดไปทันที</li>\n        </ul>\n        <pre><code>\n# ตัวอย่างการใช้ break\nprint(\"ตัวอย่าง break:\")\nfor i in range(10):\n    if i == 5:\n        break # เมื่อ i เป็น 5 ให้หยุด loop ทันที\n    print(i) # จะพิมพ์ 0, 1, 2, 3, 4\n\nprint(\"\\nตัวอย่าง continue:\")\n# ตัวอย่างการใช้ continue (ข้ามเลขคู่)\nfor i in range(10):\n    if i % 2 == 0: # ถ้า i เป็นเลขคู่ (i หาร 2 เหลือเศษ 0)\n        continue # ให้ข้ามการทำงานส่วนที่เหลือในรอบนี้ (คือข้ามคำสั่ง print) แล้วไปรอบถัดไป\n    print(i) # จะพิมพ์เฉพาะเลขคี่: 1, 3, 5, 7, 9\n        </code></pre>\n\n        <h2>Functions (ฟังก์ชัน)</h2>\n        <p>ฟังก์ชันคือกลุ่มของคำสั่งที่ถูกตั้งชื่อและรวมเข้าไว้ด้วยกัน เพื่อใช้ทำงานเฉพาะอย่าง การใช้ฟังก์ชันช่วยให้:</p>\n        <ul>\n            <li><strong>นำโค้ดกลับมาใช้ซ้ำ (Reusability):</strong> เขียนโค้ดชุดหนึ่งครั้งเดียว แล้วเรียกใช้ได้หลายๆ ที่</li>\n            <li><strong>จัดระเบียบโค้ด (Organization):</strong> แบ่งโปรแกรมใหญ่ๆ ออกเป็นส่วนย่อยๆ ที่จัดการได้ง่ายขึ้น</li>\n            <li><strong>ทำให้โค้ดอ่านง่ายขึ้น (Readability):</strong> ชื่อฟังก์ชันบอกว่า Block ของโค้ดนี้ทำอะไร</li>\n        </ul>\n\n        <h3>การประกาศ (Define) และเรียกใช้งาน (Call) ฟังก์ชัน</h3>\n        <p>ใช้คำสั่ง <code>def</code> ในการประกาศฟังก์ชัน และเรียกใช้งานด้วยชื่อฟังก์ชันตามด้วยวงเล็บ <code>()</code></p>\n        <pre><code>\n# การประกาศฟังก์ชันที่ไม่มีพารามิเตอร์และไม่มีค่าคืน\ndef say_hello():\n    print(\"สวัสดีครับ!\")\n    print(\"ยินดีต้อนรับสู่โลกของฟังก์ชัน\")\n\n# การประกาศฟังก์ชันที่มีพารามิเตอร์ (parameters)\ndef greet(name): # \'name\' คือพารามิเตอร์\n    print(f\"สวัสดี, {name}!\")\n\n# การประกาศฟังก์ชันที่มีพารามิเตอร์และคืนค่า (return value)\ndef add_numbers(x, y): # \'x\' และ \'y\' คือพารามิเตอร์\n    sum_result = x + y\n    return sum_result # ใช้คำสั่ง return เพื่อส่งค่าผลบวกกลับคืนไป\n\n# --- การเรียกใช้งานฟังก์ชัน ---\nprint(\"เรียกใช้ฟังก์ชัน say_hello:\")\nsay_hello() # เรียกใช้ฟังก์ชัน say_hello()\n\nprint(\"\\nเรียกใช้ฟังก์ชัน greet:\")\ngreet(\"สมชาย\") # เรียกใช้ฟังก์ชัน greet() พร้อมส่ง \"สมชาย\" เป็น argument ให้กับพารามิเตอร์ name\ngreet(\"สุดา\")   # เรียกใช้ซ้ำด้วย argument อื่น\n\nprint(\"\\nเรียกใช้ฟังก์ชัน add_numbers:\")\n# เรียกใช้ฟังก์ชัน add_numbers และเก็บค่าที่คืนกลับมาในตัวแปร\nresult = add_numbers(10, 20) # ส่ง 10 และ 20 เป็น argument ให้กับ x และ y ตามลำดับ\nprint(\"ผลบวกที่ได้คือ:\", result) # Output: ผลบวกที่ได้คือ: 30\n\n# สามารถเรียกใช้และแสดงผลค่าที่คืนกลับมาโดยตรงได้\nprint(\"ผลบวกของ 5 กับ 3 คือ:\", add_numbers(5, 3)) # Output: ผลบวกของ 5 กับ 3 คือ: 8\n        </code></pre>\n        <h3>คำอธิบาย Syntax</h3>\n        <ul>\n            <li><code>def function_name(parameters):</code> : เริ่มต้นการประกาศฟังก์ชันด้วย <code>def</code> ตามด้วยชื่อฟังก์ชัน วงเล็บ <code>()</code> สำหรับ Parameter (ตัวแปรที่ฟังก์ชันใช้รับค่าเข้ามา) และปิดท้ายด้วย <code>:</code></li>\n            <li><strong>Indentation:</strong> โค้ดที่อยู่ภายใน Block ของฟังก์ชันทั้งหมดจะต้องมี Indentation เท่ากัน</li>\n            <li><code>return value</code> : คำสั่งนี้ใช้สำหรับให้ฟังก์ชันส่งค่าบางอย่างกลับคืนไปให้จุดที่เรียกใช้งาน ถ้าไม่มีคำสั่ง <code>return</code> ฟังก์ชันจะคืนค่า <code>None</code> โดยอัตโนมัติ</li>\n            <li><strong>Parameters:</strong> ตัวแปรที่อยู่ในวงเล็บตอน <strong>ประกาศ</strong> ฟังก์ชัน (เป็นเหมือนช่องว่างสำหรับรับข้อมูล)</li>\n            <li><strong>Arguments:</strong> ค่าที่เราส่งเข้าไปในวงเล็บตอน <strong>เรียกใช้งาน</strong> ฟังก์ชัน ค่าเหล่านี้จะถูกส่งไปกำหนดให้กับ Parameters ตามลำดับ</li>\n            <li><code>function_name(arguments)</code> : วิธีเรียกใช้งานฟังก์ชัน</li>\n        </ul>\n\n        <h3>ขอบเขตของตัวแปร (Variable Scope - เบื้องต้น)</h3>\n        <p>ตัวแปรที่ประกาศขึ้นภายในฟังก์ชัน จะมีอยู่และใช้งานได้เฉพาะภายในฟังก์ชันนั้นเท่านั้น (เรียกว่า Local Variable) ไม่สามารถเรียกใช้จากภายนอกฟังก์ชันได้โดยตรง</p>\n         <pre><code>\ndef my_function():\n    local_var = 10 # นี่คือตัวแปร Local\n\n# print(local_var) # บรรทัดนี้จะ Error! เพราะ local_var มีอยู่แค่ภายใน my_function()\n\nglobal_var = 20 # นี่คือตัวแปร Global\n\ndef another_function():\n    # สามารถอ่านค่าตัวแปร Global ได้ภายในฟังก์ชัน\n    print(\"ภายใน another_function:\", global_var)\n\nanother_function() # Output: ภายใน another_function: 20\nprint(\"ภายนอกฟังก์ชัน:\", global_var) # Output: ภายนอกฟังก์ชัน: 20\n         </code></pre>\n        <p>การเข้าใจเรื่อง Scope จะสำคัญมากขึ้นเมื่อโปรแกรมซับซ้อนขึ้น แต่สำหรับผู้เริ่มต้น ให้จำไว้ก่อนว่า ตัวแปรในฟังก์ชันส่วนใหญ่จะเป็น Local ครับ</p>\n\n        <hr>\n\n        <h2>สรุปและฝึกฝน</h2>\n        <p>คุณได้เรียนรู้เครื่องมือสำคัญในการควบคุมการทำงานของโปรแกรมแล้ว:</p>\n        <ul>\n            <li><strong>Control Flow:</strong> ใช้ <code>if</code>, <code>elif</code>, <code>else</code> ในการตัดสินใจ และใช้ <code>for</code>, <code>while</code> ในการทำซ้ำ รวมถึง <code>break</code>, <code>continue</code> เพื่อควบคุม Loop</li>\n            <li><strong>Functions:</strong> ใช้ <code>def</code> เพื่อสร้างกลุ่มคำสั่งที่นำกลับมาใช้ซ้ำได้ ช่วยให้โค้ดเป็นระเบียบและเข้าใจง่ายขึ้น</li>\n        </ul>\n        <p><strong>การฝึกฝนคือกุญแจสำคัญ!</strong> ลองเขียนโปรแกรมที่ใช้ Control Flow และ Functions ดูนะครับ เช่น:</p>\n        <ul>\n            <li>เขียนฟังก์ชันคำนวณหาค่าเฉลี่ยของตัวเลขใน List</li>\n            <li>เขียนโปรแกรมที่รับตัวเลขจากผู้ใช้ไปเรื่อยๆ จนกว่าผู้ใช้จะป้อนค่าบางอย่าง (เช่น \"หยุด\") แล้วจึงคำนวณผลรวม</li>\n            <li>เขียนโปรแกรมสุ่มตัวเลขแล้วให้ผู้ใช้ทาย โดยให้สิทธิ์ทายได้จำกัดจำนวนครั้ง</li>\n        </ul>\n        <p>นำสิ่งที่ได้เรียนรู้เรื่องตัวแปร ชนิดข้อมูล Control Flow และ Functions มาผสมผสานกันดูนะครับ หากมีคำถามหรือติดตรงไหน ถามได้เลยครับ!</p>\n    </div>', 3),
(4, 1, 'Object-Oriented Programming in Python', '<style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3 {\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2px solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>การเขียนโปรแกรมเชิงวัตถุ (Object-Oriented Programming - OOP) ใน Python</h1>\n\n        <p>การเขียนโปรแกรมเชิงวัตถุ หรือ OOP เป็นแนวคิดในการเขียนโปรแกรมที่มองทุกสิ่งเป็น \"วัตถุ\" (Object) เหมือนสิ่งของต่างๆ ในโลกจริง แต่ละวัตถุมีคุณสมบัติ (Properties) และพฤติกรรม (Behaviors) ของตัวเอง</p>\n\n        <p><strong>ทำไมต้องใช้ OOP?</strong></p>\n        <ul>\n            <li><strong>ช่วยจัดระเบียบโค้ด:</strong> ทำให้โค้ดขนาดใหญ่อ่านง่ายและจัดการได้ง่ายขึ้น</li>\n            <li><strong>นำโค้ดกลับมาใช้ซ้ำได้:</strong> ลดการเขียนโค้ดซ้ำๆ</li>\n            <li><strong>จำลองโลกจริง:</strong> ช่วยให้เราสร้างแบบจำลองของสิ่งต่างๆ ในโลกจริงในโปรแกรมได้</li>\n            <li><strong>จัดการความซับซ้อนได้ดี:</strong> ทำให้โปรแกรมที่ซับซ้อนแตกออกเป็นส่วนย่อยๆ ที่เข้าใจง่าย</li>\n        </ul>\n\n        <p>แนวคิดหลักของ OOP ประกอบด้วย:</p>\n        <ul>\n            <li>Class (คลาส)</li>\n            <li>Object (วัตถุ)</li>\n            <li>Attributes (คุณสมบัติ/ข้อมูลของวัตถุ)</li>\n            <li>Methods (เมธอด/พฤติกรรมของวัตถุ)</li>\n            <li>Encapsulation (การห่อหุ้ม)</li>\n            <li>Inheritance (การสืบทอด)</li>\n            <li>Polymorphism (พหุสัณฐาน)</li>\n        </ul>\n\n        <h2>Class (คลาส) และ Object (วัตถุ)</h2>\n        <p>ลองนึกภาพ <strong>Class</strong> เหมือนเป็น <strong>\"พิมพ์เขียว\" (Blueprint)</strong> หรือ \"แม่แบบ\" สำหรับสร้างวัตถุ คลาสจะกำหนดว่าวัตถุที่สร้างขึ้นจากคลาสนั้นจะมีคุณสมบัติ (Attributes) อะไรได้บ้าง และทำอะไรได้บ้าง (Methods)</p>\n        <p>ส่วน <strong>Object</strong> คือ <strong>\"สิ่งของจริง\" (Instance)</strong> ที่ถูกสร้างขึ้นมาจากพิมพ์เขียวของคลาส แต่ละ Object จะมีข้อมูลของคุณสมบัติของตัวเอง (ซึ่งอาจแตกต่างกันไปในแต่ละ Object) แต่จะใช้ Methods ร่วมกันตามที่คลาสกำหนดไว้</p>\n\n        <p><strong>Syntax การสร้าง Class:</strong> ใช้คำสั่ง <code>class</code> ตามด้วยชื่อคลาส (นิยมใช้ตัวอักษรตัวแรกเป็นพิมพ์ใหญ่)</p>\n        <pre><code>\nclass Dog:\n    # ส่วนนี้คือ Block ของ Class\n    pass # \'pass\' ใช้เมื่อ Block นั้นยังไม่มีคำสั่งอะไร\n        </code></pre>\n        <p><strong>Syntax การสร้าง Object (Instance) จาก Class:</strong> เรียกชื่อคลาสตามด้วยวงเล็บ <code>()</code> แล้วกำหนดให้กับตัวแปร</p>\n        <pre><code>\n# สร้าง Object ชื่อ my_dog จาก Class Dog\nmy_dog = Dog()\n\n# สร้าง Object อีกตัวชื่อ your_dog\nyour_dog = Dog()\n\nprint(my_dog)     # จะแสดงที่อยู่ของ Object ในหน่วยความจำ\nprint(your_dog)   # จะแสดงที่อยู่อีกที่หนึ่ง แสดงว่าเป็นคนละ Object กัน\nprint(type(my_dog)) # Output: &lt;class \'__main__.Dog\'&gt; แสดงว่า my_dog เป็น Object ของ Class Dog\n        </code></pre>\n\n        <h2>Attributes (คุณสมบัติ / ข้อมูลของวัตถุ)</h2>\n        <p>Attributes คือข้อมูลที่เก็บอยู่ใน Object นั้นๆ เพื่ออธิบายสถานะหรือลักษณะของ Object เช่น Object หมา อาจมีคุณสมบัติ ชื่อ, พันธุ์, สี, อายุ</p>\n        <p>เรามักจะกำหนดค่าเริ่มต้นให้กับ Attributes เมื่อ Object ถูกสร้างขึ้น โดยใช้เมธอดพิเศษชื่อ <code>__init__</code> ซึ่งเรียกว่า Constructor เมธอดนี้จะถูกเรียกใช้โดยอัตโนมัติเมื่อเราสร้าง Object ใหม่</p>\n        <p><strong>Syntax ของ <code>__init__</code> และ <code>self</code>:</strong> เมธอด <code>__init__</code> ต้องมีพารามิเตอร์แรกเป็น <code>self</code> เสมอ ซึ่ง <code>self</code> จะหมายถึงตัว Object นั้นๆ ที่กำลังถูกสร้างขึ้น เราใช้ <code>self.attribute_name</code> เพื่ออ้างถึง Attribute ของ Object นั้น</p>\n         <pre><code>\nclass Dog:\n    # เมธอด __init__ (Constructor)\n    def __init__(self, name, breed, age):\n        # self คือ Object ที่กำลังถูกสร้างขึ้น\n        self.name = name   # สร้าง attribute ชื่อ \'name\' ของ Object และกำหนดค่า\n        self.breed = breed # สร้าง attribute ชื่อ \'breed\' ของ Object และกำหนดค่า\n        self.age = age     # สร้าง attribute ชื่อ \'age\' ของ Object และกำหนดค่า\n\n# สร้าง Object พร้อมส่งค่าไปให้ __init__\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\", 3)\n\n# เข้าถึง (Access) Attribute ของ Object\nprint(f\"ชื่อหมาของฉัน: {my_dog.name}\")\nprint(f\"พันธุ์: {my_dog.breed}\")\nprint(f\"อายุ: {my_dog.age} ปี\")\n\n# สร้าง Object อีกตัว มีค่า Attribute แตกต่างกันได้\nyour_dog = Dog(\"Lucy\", \"Poodle\", 5)\nprint(f\"\\nชื่อหมาของคุณ: {your_dog.name}\")\nprint(f\"อายุ: {your_dog.age} ปี\")\n\n# เปลี่ยนค่า Attribute ได้\nmy_dog.age = 4\nprint(f\"\\nอายุใหม่ของ {my_dog.name}: {my_dog.age} ปี\")\n         </code></pre>\n         <p><strong>คำอธิบาย:</strong> เมื่อเรียก <code>Dog(\"Buddy\", \"Golden Retriever\", 3)</code> Python จะสร้าง Object เปล่าๆ ขึ้นมา แล้วเรียกเมธอด <code>__init__</code> ของ Object นั้น โดยส่ง Object เปล่านั้นเองเข้าไปเป็นค่าของ <code>self</code> และส่ง <code>\"Buddy\"</code>, <code>\"Golden Retriever\"</code>, <code>3</code> เป็นค่าของ <code>name</code>, <code>breed</code>, <code>age</code> ตามลำดับ ภายใน <code>__init__</code> ก็จะใช้ค่าเหล่านี้ไปสร้างและกำหนดค่าให้ Attribute ของ Object (<code>self.name</code>, <code>self.breed</code>, <code>self.age</code>)</p>\n\n         <h3>Class Attributes</h3>\n         <p>นอกจาก Instance Attributes ที่เป็นข้อมูลเฉพาะของแต่ละ Object แล้ว ยังมี Class Attributes ซึ่งเป็นข้อมูลที่ใช้ร่วมกันโดย Object ทุกตัวของคลาสนั้น Class Attribute จะประกาศไว้ใน Block ของคลาส แต่อยู่นอกเมธอดใดๆ</p>\n         <pre><code>\nclass Dog:\n    # Class Attribute: คุณสมบัติที่ทุก Object ของคลาสนี้นำไปใช้\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, breed):\n        self.name = name       # Instance Attribute\n        self.breed = breed     # Instance Attribute\n\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\")\nyour_dog = Dog(\"Lucy\", \"Poodle\")\n\nprint(f\"{my_dog.name} is a {my_dog.species}\")    # เข้าถึง Class Attribute ผ่าน Object\nprint(f\"{your_dog.name} is also a {your_dog.species}\")\n\nprint(f\"Class Attribute directly: {Dog.species}\") # เข้าถึง Class Attribute ผ่าน Class Name\n         </code></pre>\n\n        <h2>Methods (เมธอด / พฤติกรรมของวัตถุ)</h2>\n        <p>Methods คือฟังก์ชันที่ถูกกำหนดไว้ภายใน Class เพื่อบอกว่า Object ของคลาสนั้นทำอะไรได้บ้าง Methods สามารถเข้าถึงและเปลี่ยนแปลง Attributes ของ Object ได้</p>\n        <p><strong>Syntax การสร้าง Method:</strong> เหมือนการสร้างฟังก์ชันทั่วไป แต่ต้องประกาศไว้ใน Block ของ Class และเมธอดของ Object (Instance Method) จะต้องมีพารามิเตอร์แรกเป็น <code>self</code> เสมอ</p>\n         <pre><code>\nclass Dog:\n    def __init__(self, name, breed):\n        self.name = name\n        self.breed = breed\n\n    # Method: พฤติกรรมของ Object (สุนัขเห่า)\n    def bark(self):\n        print(f\"{self.name} บอกว่า: วูฟ! วูฟ!\")\n\n    # Method: แสดงข้อมูลของ Object\n    def display_info(self):\n        print(f\"ชื่อ: {self.name}, พันธุ์: {self.breed}\")\n\n# สร้าง Object\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\")\n\n# เรียกใช้งาน Method ของ Object\nmy_dog.bark()\nmy_dog.display_info()\n\nyour_dog = Dog(\"Lucy\", \"Poodle\")\nyour_dog.bark()\nyour_dog.display_info()\n         </code></pre>\n         <p><strong>คำอธิบาย:</strong> เมธอด <code>bark()</code> และ <code>display_info()</code> ถูกประกาศไว้ใน Class <code>Dog</code> เมื่อเราเรียก <code>my_dog.bark()</code> Python จะรู้ว่าให้เรียกเมธอด <code>bark</code> ของ Object <code>my_dog</code> โดยส่ง Object <code>my_dog</code> นั้นเองเข้าไปเป็นค่าของพารามิเตอร์ <code>self</code></p>\n\n        <h2>Encapsulation (การห่อหุ้ม)</h2>\n        <p>Encapsulation คือแนวคิดของการ \"ห่อหุ้ม\" ข้อมูล (Attributes) และฟังก์ชันที่จัดการข้อมูลนั้น (Methods) เข้าไว้ด้วยกันในหน่วยเดียวคือ Object การห่อหุ้มยังรวมถึงการซ่อนรายละเอียดภายในที่ไม่จำเป็นจากภายนอกด้วย</p>\n        <p>ใน Python ไม่มีการบังคับให้ซ่อนข้อมูลอย่างเข้มงวดเหมือนบางภาษา แต่มีแนวปฏิบัติ (Convention) ในการตั้งชื่อเพื่อบอกว่า Attribute นี้ควรเข้าถึงจากภายใน Class เท่านั้น โดยใช้เครื่องหมายขีดล่างนำหน้าชื่อ:</p>\n        <ul>\n            <li><code>_attribute_name</code> : บอกเป็นนัยว่า Attribute นี้ควรเข้าถึงจากภายใน Class เท่านั้น แต่ยังเข้าถึงจากภายนอกได้ปกติ</li>\n            <li><code>__attribute_name</code> (นำหน้าด้วยขีดล่างสองตัว): Python จะทำการ \"แปลงชื่อ\" (Name Mangling) ทำให้นำเข้าถึงจากภายนอกโดยตรงได้ยากขึ้น แต่ก็ยังทำได้หากรู้วิธี</li>\n        </ul>\n         <pre><code>\nclass BankAccount:\n    def __init__(self, balance):\n        # แนะนำว่ายอดเงินควรเป็น private ไม่ให้ภายนอกแก้ไขตรงๆ\n        self.__balance = balance # ใช้ __ เพื่อบ่งชี้ว่าควรเข้าถึงผ่านเมธอด\n\n    def deposit(self, amount):\n        if amount &gt; 0:\n            self.__balance += amount\n            print(f\"ฝากเงิน {amount} บาท ยอดคงเหลือ: {self.__balance}\")\n        else:\n            print(\"จำนวนเงินฝากต้องมากกว่า 0\")\n\n    def withdraw(self, amount):\n        if 0 &lt; amount &lt;= self.__balance:\n            self.__balance -= amount\n            print(f\"ถอนเงิน {amount} บาท ยอดคงเหลือ: {self.__balance}\")\n        else:\n            print(\"ถอนเงินไม่สำเร็จ: จำนวนเงินไม่ถูกต้อง หรือยอดเงินไม่พอ\")\n\n    def get_balance(self): # สร้างเมธอดสำหรับเข้าถึงยอดเงิน แทนการเข้าถึง Attribute ตรงๆ\n        return self.__balance\n\naccount = BankAccount(1000)\naccount.deposit(500)\naccount.withdraw(200)\nprint(\"ยอดเงินคงเหลือผ่านเมธอด:\", account.get_balance())\n\n# การพยายามเข้าถึง Attribute โดยตรง (ตามหลัก encapsulation ไม่ควรทำ)\n# print(account.__balance) # จะ Error เพราะ Python แปลงชื่อไปแล้ว\n# print(account._BankAccount__balance) # อันนี้คือชื่อที่ถูกแปลง แต่ไม่ควรเรียกแบบนี้ในโค้ดปกติ\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> ในตัวอย่างนี้ <code>__balance</code> ถูกซ่อนไว้ การเปลี่ยนแปลงยอดเงินทำผ่านเมธอด <code>deposit()</code> และ <code>withdraw()</code> เท่านั้น ซึ่งเป็นการควบคุมการเข้าถึงข้อมูล ทำให้มั่นใจได้ว่ายอดเงินจะถูกเปลี่ยนแปลงอย่างถูกต้อง</p>\n\n\n        <h2>Inheritance (การสืบทอด)</h2>\n        <p>Inheritance คือความสามารถในการสร้าง Class ใหม่ (เรียกว่า Class ลูก หรือ Subclass) โดย Class ลูกจะ \"สืบทอด\" คุณสมบัติ (Attributes) และพฤติกรรม (Methods) ทั้งหมดมาจาก Class เดิม (เรียกว่า Class แม่ หรือ Superclass / Parent Class) ทำให้เราไม่ต้องเขียนโค้ดซ้ำๆ สำหรับคุณสมบัติหรือพฤติกรรมพื้นฐานที่เหมือนกัน</p>\n        <p><strong>Syntax การสืบทอด:</strong> ระบุชื่อ Class แม่ในวงเล็บหลังชื่อ Class ลูก</p>\n        <pre><code>\n# Class แม่ (Parent Class)\nclass Animal:\n    def __init__(self, species):\n        self.species = species\n        print(f\"A {self.species} is created.\")\n\n    def eat(self):\n        print(\"This animal is eating.\")\n\n    def sleep(self):\n        print(\"This animal is sleeping.\")\n\n# Class ลูก (Child Class) สืบทอดจาก Animal\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        # เรียก constructor ของ Class แม่ เพื่อกำหนดค่า Attribute ของ Class แม่\n        super().__init__(\"Dog\") # เรียก __init__ ของ Animal และส่ง \"Dog\" ไปให้ species\n        self.name = name\n        self.breed = breed\n        print(f\"Dog named {self.name} is created.\")\n\n    # เพิ่ม Method เฉพาะของ Class ลูก\n    def bark(self):\n        print(f\"{self.name} says Woof!\")\n\n    # Override Method จาก Class แม่ (Polymorphism อย่างง่าย)\n    def eat(self):\n        print(f\"{self.name} is eating its kibble.\") # พฤติกรรมการกินของ Dog ต่างจาก Animal ทั่วไป\n\n# สร้าง Object จาก Class แม่\nmy_animal = Animal(\"Unknown Creature\")\nmy_animal.eat()\nmy_animal.sleep()\n\nprint(\"-\" * 20) # เส้นแบ่ง\n\n# สร้าง Object จาก Class ลูก\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\")\nmy_dog.bark()       # ใช้ Method ของ Class ลูกเอง\nmy_dog.eat()        # ใช้ Method eat() ที่ถูก Override ใน Class ลูก\nmy_dog.sleep()      # ใช้ Method sleep() ที่สืบทอดมาจาก Class แม่\nprint(f\"{my_dog.name} belongs to species: {my_dog.species}\") # ใช้ Attribute ที่สืบทอดมาจาก Class แม่\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> Class <code>Dog</code> สืบทอดมาจาก Class <code>Animal</code> ดังนั้น Object ของ Class <code>Dog</code> จึงมีทั้ง Method <code>eat()</code>, <code>sleep()</code> และ Attribute <code>species</code> จาก Class <code>Animal</code> นอกจากนี้ Class <code>Dog</code> ยังมี Method <code>bark()</code> เพิ่มเข้ามา และแก้ไขพฤติกรรมของ Method <code>eat()</code> ให้แตกต่างจาก Class แม่ โดยการเขียน Method <code>eat()</code> ขึ้นมาใหม่ใน Class ลูก ซึ่งเรียกว่า Method Overriding</p>\n        <p><code>super().__init__(\"Dog\")</code> : คำสั่ง <code>super()</code> ใช้เพื่ออ้างถึง Class แม่ ในที่นี้คือการเรียก Constructor (<code>__init__</code>) ของ Class แม่ เพื่อให้ Class แม่จัดการกับการกำหนดค่าเริ่มต้น Attribute ของตัวเอง (คือ <code>species</code>)</p>\n\n        <h2>Polymorphism (พหุสัณฐาน)</h2>\n        <p>Polymorphism หมายถึง \"หลายรูปแบบ\" ใน OOP หมายถึงความสามารถของ Object ที่มาจาก Class ต่างกัน (แต่มีการสืบทอดมาจาก Class แม่เดียวกัน หรือมี Methods ที่ชื่อเหมือนกัน) ที่จะตอบสนองต่อคำสั่งเดียวกันในแบบของตัวเอง ตัวอย่างที่เห็นได้ง่ายคือการ Override Method ใน Class ลูก</p>\n        <p>จากตัวอย่างข้างบน เมธอด <code>eat()</code> มีอยู่ในทั้ง Class <code>Animal</code> และ Class <code>Dog</code> (จากการ Override) เราสามารถเขียนฟังก์ชันที่รับ Object ใดๆ ที่มีเมธอด <code>eat()</code> ได้ โดยไม่ต้องรู้ว่า Object นั้นเป็น Class แม่หรือ Class ลูก ดังนี้:</p>\n         <pre><code>\n# เพิ่ม Class ลูกอีกตัว เพื่อให้เห็นภาพ Polymorphism มากขึ้น\nclass Cat(Animal):\n    def __init__(self, name, breed):\n        super().__init__(\"Cat\")\n        self.name = name\n        self.breed = breed\n        print(f\"Cat named {self.name} is created.\")\n\n    def meow(self):\n        print(f\"{self.name} says Meow!\")\n\n    # Override Method eat จาก Class แม่\n    def eat(self):\n        print(f\"{self.name} is eating its fish.\")\n\n# ฟังก์ชันที่รับ Object ของ Animal หรือ Class ลูกของ Animal\ndef feed_animal(animal_obj):\n    print(f\"--- Feeding {animal_obj.species} ---\")\n    animal_obj.eat() # เรียกเมธอด eat() ของ Object นั้นๆ\n\n# สร้าง Object ของ Class ลูกต่างๆ\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\")\nmy_cat = Cat(\"Whiskers\", \"Siamese\")\n\nprint(\"\\n--- Testing Polymorphism ---\")\nfeed_animal(my_dog) # เรียก feed_animal ด้วย Object Dog -> จะเรียก Dog.eat()\nfeed_animal(my_cat) # เรียก feed_animal ด้วย Object Cat -> จะเรียก Cat.eat()\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> ฟังก์ชัน <code>feed_animal()</code> ไม่ต้องรู้ว่า Object ที่รับเข้ามาเป็น <code>Dog</code> หรือ <code>Cat</code> แค่รู้ว่า Object นั้นมีเมธอดชื่อ <code>eat()</code> มันก็สามารถเรียกใช้งานได้ และผลลัพธ์ที่ได้ก็จะแตกต่างกันไปตามการ Override ใน Class ลูก นี่คือแนวคิดของ Polymorphism ครับ</p>\n\n\n        <h2>Abstraction (การลดทอนความซับซ้อน - แนวคิด)</h2>\n        <p>Abstraction คือการซ่อนรายละเอียดที่ซับซ้อนภายในของ Object และแสดงเฉพาะส่วนที่จำเป็นต่อการใช้งานจากภายนอก คล้ายกับเวลาเราใช้รีโมททีวี เราเห็นแค่ปุ่มกดต่างๆ (ส่วนที่จำเป็น) แต่ไม่จำเป็นต้องรู้ว่าข้างในรีโมททำงานอย่างไร (รายละเอียดที่ซับซ้อน)</p>\n        <p>ใน Python แนวคิดนี้มักถูกนำมาใช้ผ่านการออกแบบ Class และ Methods ให้ใช้งานง่าย โดยผู้ใช้ Class ไม่ต้องกังวลกับขั้นตอนภายในที่ซับซ้อน การใช้ Encapsulation และการสร้าง Abstract Class/Method (ซึ่งเป็นหัวข้อที่ซับซ้อนขึ้นไปอีกขั้น) ก็เป็นส่วนหนึ่งของ Abstraction ครับ</p>\n\n        <hr>\n\n        <h2>สรุปและฝึกฝน</h2>\n        <p>การเขียนโปรแกรมเชิงวัตถุ (OOP) เป็นเครื่องมือที่ทรงพลังสำหรับการจัดการโค้ดที่ซับซ้อน</p>\n        <ul>\n            <li><strong>Class</strong> คือแม่แบบ, <strong>Object</strong> คือสิ่งที่สร้างจากแม่แบบ</li>\n            <li><strong>Attributes</strong> คือข้อมูล/คุณสมบัติของ Object</li>\n            <li><strong>Methods</strong> คือการกระทำ/พฤติกรรมของ Object</li>\n            <li><strong>Encapsulation</strong> คือการรวมข้อมูลและ Methods เข้าด้วยกัน</li>\n            <li><strong>Inheritance</strong> คือการสร้าง Class ใหม่จาก Class เดิมเพื่อนำคุณสมบัติมาใช้ซ้ำ</li>\n            <li><strong>Polymorphism</strong> คือการที่ Object ต่างๆ ตอบสนองต่อคำสั่งเดียวกันในแบบของตัวเอง</li>\n        </ul>\n        <p>การจะเข้าใจ OOP ต้องใช้เวลาและการฝึกฝนค่อนข้างมาก ลองสร้าง Class ง่ายๆ ขึ้นมาเองดูนะครับ เช่น Class <code>Car</code> ที่มี Attributes เช่น สี, ยี่ห้อ, รุ่น และมี Methods เช่น <code>start()</code>, <code>drive()</code>, <code>stop()</code> แล้วลองสร้าง Object ของรถยนต์ต่างๆ ขึ้นมาดู หรือลองสร้าง Class แม่ <code>Shape</code> แล้วให้ Class ลูก <code>Circle</code>, <code>Square</code> สืบทอดไปพร้อม Override Method <code>calculate_area()</code></p>\n        <p>ค่อยๆ ทำความเข้าใจไปทีละขั้นนะครับ OOP จะมีประโยชน์มากในการเขียนโปรแกรมที่ใหญ่ขึ้น ขอให้สนุกกับการเรียนรู้ครับ!</p>\n\n    </div>', 4),
(5, 1, 'Decorators และ Generators', '   <style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3, h4 {\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2px solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n         h4 {\n            color: #007bff;\n            margin-top: 18px;\n            margin-bottom: 10px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n            font-size: 0.9em;\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n            font-size: 0.9em;\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>Decorators และ Generators ใน Python</h1>\n\n        <p>หัวข้อนี้เราจะมาเรียนรู้แนวคิดขั้นสูงขึ้นมาอีกหน่อยใน Python นั่นคือ Decorators และ Generators ซึ่งเป็นเครื่องมือที่มีประสิทธิภาพมากในการเขียนโค้ดที่ยืดหยุ่น ทำงานซ้ำๆ ได้ และจัดการหน่วยความจำได้ดี</p>\n\n        <h2>Decorators</h2>\n\n        <p>Decorator เป็นรูปแบบการออกแบบ (Design Pattern) ใน Python ที่ช่วยให้เราสามารถ<strong>เพิ่มฟังก์ชันการทำงานให้กับฟังก์ชัน (หรือเมธอด) ที่มีอยู่แล้ว โดยไม่ต้องแก้ไขโค้ดของฟังก์ชันต้นฉบับนั้นๆ</strong> Syntax ที่เห็นบ่อยๆ คือเครื่องหมาย <code>@</code> วางไว้เหนือการประกาศฟังก์ชัน</p>\n\n        <p><strong>Decorator ช่วยแก้ปัญหาอะไร?</strong></p>\n        <p>สมมติคุณมีหลายๆ ฟังก์ชันที่ต้องทำสิ่งเดียวกันก่อนหรือหลังการทำงานหลัก เช่น:</p>\n        <ul>\n            <li>บันทึก Log ว่าฟังก์ชันนี้ถูกเรียกใช้</li>\n            <li>วัดเวลาที่ฟังก์ชันใช้ในการประมวลผล</li>\n            <li>ตรวจสอบสิทธิ์ผู้ใช้ก่อนเข้าถึงฟังก์ชัน</li>\n            <li>จัดการกับ Error บางประเภท</li>\n        </ul>\n        <p>แทนที่จะเขียนโค้ดซ้ำๆ เหล่านี้ในทุกๆ ฟังก์ชัน เราสามารถเขียนโค้ดส่วนนี้ไว้ใน Decorator แล้ว \"ตกแต่ง\" (Decorate) ฟังก์ชันที่ต้องการได้</p>\n\n        <h3>พื้นฐานสำคัญ: Functions are First-Class Objects</h3>\n        <p>สิ่งที่เป็นหัวใจในการทำความเข้าใจ Decorator คือความจริงที่ว่า ใน Python ฟังก์ชันถือเป็น <strong>First-Class Objects</strong> ซึ่งหมายความว่า:</p>\n        <ul>\n            <li>สามารถกำหนดฟังก์ชันให้กับตัวแปรได้</li>\n            <li>สามารถส่งฟังก์ชันเป็น Argument ให้กับฟังก์ชันอื่นได้</li>\n            <li>สามารถให้ฟังก์ชันอื่นคืนค่า (Return) เป็นฟังก์ชันได้</li>\n            <li>สามารถเก็บฟังก์ชันไว้ในโครงสร้างข้อมูลต่างๆ ได้ (เช่น List, Dictionary)</li>\n        </ul>\n        <p>ดูตัวอย่างการกำหนดฟังก์ชันให้ตัวแปรและส่งฟังก์ชันเป็น Argument:</p>\n        <pre><code>\ndef say_hello(name):\n    return f\"Hello, {name}\"\n\n# 1. กำหนดฟังก์ชันให้กับตัวแปร\nmy_greeting_function = say_hello\nprint(my_greeting_function(\"Alice\")) # เรียกใช้ฟังก์ชันผ่านตัวแปร Output: Hello, Alice\n\n# 2. ส่งฟังก์ชันเป็น Argument\ndef call_another_function(func, argument):\n    print(\"กำลังจะเรียกฟังก์ชันที่ส่งเข้ามา...\")\n    result = func(argument)\n    print(\"เรียกฟังก์ชันเสร็จแล้ว\")\n    return result\n\nprint(call_another_function(say_hello, \"Bob\"))\n# Output:\n# กำลังจะเรียกฟังก์ชันที่ส่งเข้ามา...\n# เรียกฟังก์ชันเสร็จแล้ว\n# Hello, Bob\n        </code></pre>\n        <p>คุณสมบัติเหล่านี้เองที่ทำให้เราสามารถสร้างฟังก์ชันที่ \"รับฟังก์ชันอื่นมาเป็น Argument\" และ \"คืนค่าเป็นฟังก์ชันใหม่\" ได้ ซึ่งนี่คือหลักการทำงานของ Decorator!</p>\n\n        <h3>Decorator ทำงานอย่างไร? (เบื้องหลัง)</h3>\n        <p>Decorator คือฟังก์ชันที่รับฟังก์ชันอื่นมาเป็น Argument แล้วคืนค่าเป็นฟังก์ชัน \"ใหม่\" ที่มักจะมีการเพิ่มการทำงานบางอย่างเข้าไป ฟังก์ชันใหม่นี้มักจะถูกเรียกว่า \"Wrapper Function\"</p>\n        <p>มาดูโครงสร้างพื้นฐานของ Decorator ที่เราเขียนเอง:</p>\n        <pre><code>\n# นี่คือฟังก์ชันที่เราต้องการ \"ตกแต่ง\"\ndef say_whee():\n    print(\"Whee!\")\n\n# นี่คือ Decorator Function ของเรา\ndef my_simple_decorator(func): # func คือฟังก์ชันที่เราส่งเข้ามา (ในที่นี้คือ say_whee)\n    print(f\"--- Decorator: กำลังสร้าง Wrapper ให้กับฟังก์ชัน \'{func.__name__}\' ---\")\n\n    # นี่คือ Wrapper Function\n    # มันจะถูกคืนค่าออกไปแทนที่ฟังก์ชันเดิม\n    def wrapper_function():\n        print(\"--- Wrapper: กำลังจะเรียกฟังก์ชันต้นฉบับ ---\")\n        func() # เรียกใช้ฟังก์ชันต้นฉบับ (say_whee)\n        print(\"--- Wrapper: เรียกฟังก์ชันต้นฉบับเสร็จแล้ว ---\")\n\n    print(\"--- Decorator: คืนค่า Wrapper Function ---\")\n    return wrapper_function # Decorator คืนค่า Wrapper Function ออกไป\n\n# *** การใช้งาน Decorator แบบ Manual ***\n# บรรทัดนี้คือหัวใจ: กำหนดให้ชื่อ say_whee เดิม\n# ชี้ไปยังฟังก์ชันที่ถูกคืนค่ามาจาก my_simple_decorator(say_whee)\nsay_whee = my_simple_decorator(say_whee)\n\nprint(\"\\n--- กำลังเรียกใช้ say_whee() ที่ถูกตกแต่งแล้ว ---\")\nsay_whee() # ตอนนี้เมื่อเรียก say_whee() จริงๆ คือการเรียก wrapper_function()\n        </code></pre>\n        <p><strong>คำอธิบายการทำงาน:</strong></p>\n        <ol>\n            <li>เมื่อ Python รันมาถึงบรรทัด <code>say_whee = my_simple_decorator(say_whee)</code></li>\n            <li>Python จะเรียกฟังก์ชัน <code>my_simple_decorator</code> และส่งฟังก์ชัน <code>say_whee</code> ต้นฉบับเข้าไปเป็น Argument <code>func</code></li>\n            <li>ภายใน <code>my_simple_decorator</code> จะมีการประกาศฟังก์ชัน <code>wrapper_function</code></li>\n            <li><code>my_simple_decorator</code> จะคืนค่าฟังก์ชัน <code>wrapper_function</code> กลับมา</li>\n            <li>ชื่อตัวแปร <code>say_whee</code> จะถูกกำหนดให้ชี้ไปที่ฟังก์ชัน <code>wrapper_function</code> ที่ถูกคืนค่ามา แทนที่จะชี้ไปที่ฟังก์ชัน <code>say_whee</code> ต้นฉบับอีกต่อไป</li>\n            <li>ดังนั้น เมื่อเรียก <code>say_whee()</code> ในบรรทัดสุดท้าย จริงๆ แล้วคือการเรียก <code>wrapper_function()</code> ซึ่งภายใน <code>wrapper_function()</code> ก็จะมีคำสั่งเพิ่มเติมก่อนและหลังเรียก <code>func()</code> (ซึ่งก็คือ <code>say_whee()</code> ต้นฉบับ)</li>\n        </ol>\n\n        <h3>Syntax เครื่องหมาย <code>@</code></h3>\n        <p>เครื่องหมาย <code>@</code> เป็นเพียง \"น้ำตาลทางไวยากรณ์\" (Syntactic Sugar) มันช่วยให้การใช้ Decorator สะดวกขึ้น โดยมีความหมายเทียบเท่ากับการเรียก Decorator แบบ Manual ด้านบน</p>\n        <p>โค้ดตัวอย่างเดิม สามารถเขียนใหม่โดยใช้เครื่องหมาย <code>@</code> ได้ดังนี้:</p>\n        <pre><code>\n# นี่คือ Decorator Function (เหมือนเดิม)\ndef my_simple_decorator(func):\n    def wrapper_function():\n        print(\"--- Wrapper: กำลังจะเรียกฟังก์ชันต้นฉบับ ---\")\n        func()\n        print(\"--- Wrapper: เรียกฟังก์ชันต้นฉบับเสร็จแล้ว ---\")\n    return wrapper_function\n\n# *** การใช้งาน Decorator ด้วย @ ***\n@my_simple_decorator # นี่คือส่วนที่เพิ่มเข้ามา\ndef say_whee():\n    print(\"Whee!\")\n\nprint(\"--- กำลังเรียกใช้ say_whee() ที่ถูกตกแต่งแล้ว (ด้วย @) ---\")\nsay_whee() # เหมือนเดิม คือการเรียก wrapper_function()\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> บรรทัด <code>@my_simple_decorator</code> ที่วางไว้เหนือ <code>def say_whee():</code> มีความหมายเทียบเท่ากับบรรทัด <code>say_whee = my_simple_decorator(say_whee)</code> ที่เขียนแบบ Manual นั่นเอง</p>\n\n        <h3>Decorator กับฟังก์ชันที่มี Arguments และ Return Value</h3>\n        <p>Decorator จะต้องจัดการกับฟังก์ชันต้นฉบับที่อาจมี Arguments และคืนค่าได้ด้วย โดย Wrapper Function ควรรับ Arguments ได้ไม่จำกัดโดยใช้ <code>*args</code> และ <code>**kwargs</code> และควรคืนค่าที่ได้จากการเรียกฟังก์ชันต้นฉบับด้วย</p>\n        <pre><code>\ndef log_decorator(func):\n    def wrapper(*args, **kwargs): # รับ Argument ได้ไม่จำกัด\n        print(f\"กำลังจะเรียกฟังก์ชัน: {func.__name__} ด้วย Arguments: {args}, {kwargs}\")\n        result = func(*args, **kwargs) # เรียกฟังก์ชันต้นฉบับพร้อมส่ง Arguments\n        print(f\"เรียกฟังก์ชัน: {func.__name__} เสร็จแล้ว ได้ผลลัพธ์: {result}\")\n        return result # คืนค่าที่ได้จากฟังก์ชันต้นฉบับ\n    return wrapper\n\n@log_decorator\ndef add(a, b):\n    \"\"\"ฟังก์ชันสำหรับบวกเลขสองตัว\"\"\"\n    return a + b\n\n@log_decorator\ndef greet(name, message=\"Hello\"):\n    \"\"\"ฟังก์ชันสำหรับทักทาย\"\"\"\n    return f\"{message}, {name}!\"\n\nprint(add(10, 5))\nprint(greet(\"Alice\", message=\"Hi\"))\nprint(greet(\"Bob\")) # ใช้ Default Argument\n        </code></pre>\n\n        <h3>การใช้ <code>functools.wraps</code></h3>\n        <p>เมื่อใช้ Decorator แบบที่เราสร้างขึ้นเอง ฟังก์ชันที่ถูกตกแต่งจะสูญเสีย Metadata เดิมไป เช่น ชื่อฟังก์ชัน (<code>__name__</code>) และ Docstring (<code>__doc__</code>) ซึ่งอาจทำให้เกิดปัญหาในการ Debug หรือใช้เครื่องมือสร้างเอกสาร</p>\n        <p>เราสามารถแก้ไขปัญหานี้ได้โดยใช้ Decorator ชื่อ <code>wraps</code> จากโมดูล <code>functools</code> มาตกแต่ง Wrapper Function อีกชั้นหนึ่ง</p>\n        <pre><code>\nimport functools\n\ndef my_logging_decorator(func):\n    @functools.wraps(func) # ใช้ wraps เพื่อคัดลอก metadata จาก func มาที่ wrapper\n    def wrapper(*args, **kwargs):\n        \"\"\"นี่คือ Docstring ของ Wrapper.\"\"\"\n        print(f\"LOG: กำลังเข้าสู่ฟังก์ชัน \'{func.__name__}\'\")\n        result = func(*args, **kwargs)\n        print(f\"LOG: ออกจากฟังก์ชัน \'{func.__name__}\'\")\n        return result\n    # ไม่ต้อง return functools.wraps(func)(wrapper) เพราะ @functools.wraps(func) ทำแทนแล้ว\n    return wrapper\n\n@my_logging_decorator\ndef calculate_area(radius):\n    \"\"\"คำนวณพื้นที่วงกลม\"\"\"\n    import math\n    return math.pi * (radius ** 2)\n\nprint(\"ชื่อฟังก์ชันที่ถูกตกแต่ง:\", calculate_area.__name__) # Output: calculate_area (ถ้าไม่ใช้ wraps จะเป็น \'wrapper\')\nprint(\"Docstring ของฟังก์ชัน:\", calculate_area.__doc__)  # Output: คำนวณพื้นที่วงกลม (ถ้าไม่ใช้ wraps จะเป็น Docstring ของ wrapper)\n\narea = calculate_area(10)\nprint(\"พื้นที่:\", area)\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> การเพิ่ม <code>@functools.wraps(func)</code> เหนือการประกาศ <code>wrapper</code> ทำให้ <code>wrapper</code> ได้รับการคัดลอกชื่อ, Docstring และ Metadata อื่นๆ มาจากฟังก์ชัน <code>func</code> ต้นฉบับ ทำให้ฟังก์ชันที่ถูกตกแต่งแล้วยังมีข้อมูลอ้างอิงถึงต้นฉบับอยู่</p>\n\n        <h3>สรุป Decorators</h3>\n        <p>Decorators เป็นวิธีที่สะอาดและมีประสิทธิภาพในการเพิ่มหรือแก้ไขการทำงานของฟังก์ชันหรือเมธอดโดยไม่ไปยุ่งกับโค้ดต้นฉบับ ทำงานโดยอาศัยคุณสมบัติที่ฟังก์ชันเป็น First-Class Objects และใช้ Syntax <code>@decorator_name</code> เพื่อการใช้งานที่สะดวก</p>\n\n\n        <h2>Generators</h2>\n\n        <p>Generator คือฟังก์ชันชนิดพิเศษใน Python ที่ใช้สำหรับ <strong>สร้างลำดับของค่า (Sequence of values) แบบทีละค่า (on-the-fly) โดยไม่จำเป็นต้องสร้างและเก็บทั้งลำดับไว้ในหน่วยความจำพร้อมกันทั้งหมด</strong> ทำให้มีประสิทธิภาพมากเมื่อต้องจัดการกับลำดับข้อมูลขนาดใหญ่ หรือลำดับที่อาจไม่มีที่สิ้นสุด</p>\n\n        <p><strong>Generator ช่วยแก้ปัญหาอะไร?</strong></p>\n        <p>สมมติคุณต้องการสร้าง List ของตัวเลข 1 ถึง 1 พันล้าน ถ้าใช้ List Comprehension ปกติ คุณจะต้องสร้าง List ที่มีสมาชิก 1 พันล้านตัว และเก็บไว้ในหน่วยความจำทั้งหมดพร้อมกัน ซึ่งอาจทำให้หน่วยความจำไม่พอหรือโปรแกรมช้า</p>\n        <p>แต่ถ้าใช้ Generator คุณสามารถสร้างตัวเลขเหล่านี้ \"เมื่อถูกเรียกขอ\" ทีละตัว โดยไม่ได้สร้างและเก็บทั้ง 1 พันล้านตัวไว้ล่วงหน้า</p>\n\n        <h3>Generator Functions และ คำสั่ง <code>yield</code></h3>\n        <p>ฟังก์ชันใดๆ ที่มีคำสั่ง <code>yield</code> จะกลายเป็น Generator Function โดยอัตโนมัติ คำสั่ง <code>yield</code> คล้ายกับ <code>return</code> แต่มีความแตกต่างที่สำคัญมาก:</p>\n        <ul>\n            <li><code>return value</code>: สั่งให้ฟังก์ชันคืนค่า <code>value</code> แล้ว <strong>จบการทำงาน</strong> ของฟังก์ชันนั้นอย่างถาวร</li>\n            <li><code>yield value</code>: สั่งให้ฟังก์ชันคืนค่า <code>value</code> แล้ว <strong>พักการทำงาน</strong> ของฟังก์ชันนั้นไว้ ชั่วคราว พร้อมทั้ง \"จำสถานะ\" ปัจจุบันของฟังก์ชันไว้ (ค่าของตัวแปร Local, ตำแหน่งที่ทำงานอยู่) และเมื่อมีการเรียกขอค่าต่อไปจาก Generator ฟังก์ชันจะ <strong>กลับมาทำงานต่อ</strong> จากจุดที่พักไว้</li>\n        </ul>\n\n        <p>ดูตัวอย่าง Generator Function:</p>\n        <pre><code>\ndef simple_generator():\n    print(\"จุดเริ่มต้นของ Generator\")\n    yield 1 # หยุดพัก คืนค่า 1 แล้วจำสถานะไว้\n    print(\"ทำงานต่อจากจุดพักแรก\")\n    yield 2 # หยุดพัก คืนค่า 2 แล้วจำสถานะไว้\n    print(\"ทำงานต่อจากจุดพักที่สอง\")\n    yield 3 # หยุดพัก คืนค่า 3 แล้วจำสถานะไว้\n    print(\"Generator ทำงานเสร็จสิ้น\") # ไม่มี yield หรือ return แล้ว\n\n# การใช้งาน Generator Function\n# เมื่อเรียก simple_generator() จะได้ Object ของ Generator กลับมา แต่โค้ดข้างในยังไม่รัน\nmy_gen = simple_generator()\n\nprint(\"สร้าง Generator Object แล้ว\")\n\nprint(\"กำลังเรียกค่าแรกด้วย next():\")\nprint(next(my_gen)) # เรียก next() ครั้งแรก จะรันถึง yield 1 แล้วหยุด\n\nprint(\"กำลังเรียกค่าที่สองด้วย next():\")\nprint(next(my_gen)) # เรียก next() ครั้งที่สอง จะรันต่อจาก yield 1 จนถึง yield 2 แล้วหยุด\n\nprint(\"กำลังเรียกค่าที่สามด้วย next():\")\nprint(next(my_gen)) # เรียก next() ครั้งที่สาม จะรันต่อจาก yield 2 จนถึง yield 3 แล้วหยุด\n\n# print(\"กำลังเรียกค่าที่สี่ด้วย next():\")\n# print(next(my_gen)) # เรียก next() ครั้งที่สี่ ไม่มี yield เหลือแล้ว จะเกิด StopIteration Error\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> Generator ไม่ได้ประมวลผลทั้งหมดทันทีที่ถูกเรียก แต่จะประมวลผลทีละส่วน เมื่อเจอ <code>yield</code> ก็ส่งค่าออกไป พักไว้ รอจนกว่าจะถูกเรียก <code>next()</code> อีกครั้ง</p>\n\n        <h3>การใช้ Generator</h3>\n        <p>วิธีที่พบบ่อยในการใช้ Generator คือการนำไปวนซ้ำใน <code>for</code> loop</p>\n        <pre><code>\ndef count_up_to(n):\n    i = 0\n    while i &lt;= n:\n        yield i\n        i += 1\n\n# ใช้ Generator ใน for loop\nprint(\"ใช้ Generator ใน for loop:\")\nfor number in count_up_to(5): # for loop จะเรียก next() ให้เราโดยอัตโนมัติ และจับ StopIteration error เมื่อ Generator ทำงานเสร็จ\n    print(number)\n# Output:\n# ใช้ Generator ใน for loop:\n# 0\n# 1\n# 2\n# 3\n# 4\n# 5\n        </code></pre>\n        <p><strong>Generator เป็น Iterator:</strong> Object ที่ได้จาก Generator Function เป็น Object ชนิด Iterator ทำให้สามารถใช้กับสิ่งต่างๆ ที่ต้องการ Iterator ได้ เช่น <code>for</code> loop, ฟังก์ชัน <code>list()</code>, <code>sum()</code>, <code>sorted()</code> เป็นต้น</p>\n         <pre><code>\ndef even_numbers(limit):\n    for i in range(0, limit + 1, 2):\n        yield i\n\n# แปลง Generator เป็น List (ถ้าลำดับไม่ใหญ่เกินไป)\neven_list = list(even_numbers(10))\nprint(\"\\nGenerator แปลงเป็น List:\", even_list) # Output: [0, 2, 4, 6, 8, 10]\n\n# ใช้ Generator กับฟังก์ชัน sum()\ntotal_sum = sum(even_numbers(100)) # Generator จะสร้างเลขคู่ให้ sum ทีละตัว\nprint(\"ผลรวมเลขคู่ถึง 100:\", total_sum)\n         </code></pre>\n\n        <h3>Generator Expressions</h3>\n        <p>คล้ายกับ List Comprehension แต่ใช้ <code>()</code> แทน <code>[]</code> เพื่อสร้าง Generator แบบง่ายๆ ที่ใช้บรรทัดเดียว เหมาะสำหรับงานที่ไม่ซับซ้อน</p>\n        <pre><code>\n# List Comprehension (สร้าง List ทั้งหมดไว้ใน memory)\nlist_of_squares = [x * x for x in range(10)]\nprint(\"List Comprehension (ชนิด):\", type(list_of_squares))\nprint(\"List Comprehension (ค่า):\", list_of_squares)\n\nprint(\"-\" * 20)\n\n# Generator Expression (สร้าง Generator Object)\ngenerator_of_squares = (x * x for x in range(10))\nprint(\"Generator Expression (ชนิด):\", type(generator_of_squares))\nprint(\"Generator Expression (ค่า):\", generator_of_squares) # จะแสดง Object ไม่ใช่ค่าทั้งหมด\n\nprint(\"วนซ้ำ Generator Expression:\")\nfor sq in generator_of_squares:\n    print(sq) # ค่าจะถูก generate ทีละตัวเมื่อ loop วน\n        </code></pre>\n        <p><strong>ข้อแตกต่างสำคัญ:</strong> List Comprehension จะประมวลผลและสร้าง List ทั้งหมดทันที ทำให้ใช้หน่วยความจำเยอะสำหรับข้อมูลขนาดใหญ่ แต่ Generator Expression จะสร้างแค่ Object ของ Generator ขึ้นมา และจะ generate ค่าทีละตัวเมื่อถูกวนซ้ำ</p>\n\n        <h3>ข้อดีและข้อจำกัดของ Generators</h3>\n        <p><strong>ข้อดี:</strong></p>\n        <ul>\n            <li><strong>ประหยัดหน่วยความจำ (Memory Efficiency):</strong> ไม่ต้องเก็บทั้งลำดับไว้ในหน่วยความจำพร้อมกัน</li>\n            <li><strong>ทำงานแบบ Lazy Evaluation:</strong> ค่าจะถูกสร้างเมื่อถูกเรียกขอเท่านั้น มีประโยชน์กับลำดับข้อมูลขนาดใหญ่หรือ Infinite Sequence</li>\n            <li><strong>อ่านง่าย:</strong> เขียนได้กระชับกว่าการสร้าง Iterator Class ด้วยตนเอง</li>\n        </ul>\n        <p><strong>ข้อจำกัด:</strong></p>\n        <ul>\n            <li><strong>วนซ้ำได้ครั้งเดียว (Single Pass):</strong> เมื่อวนซ้ำ Generator จนเสร็จแล้ว จะไม่สามารถวนซ้ำอีกครั้งได้ ต้องสร้าง Generator Object ขึ้นมาใหม่</li>\n            <li><strong>ทำงานแบบ Forward Only:</strong> ไม่สามารถย้อนกลับไปในลำดับ หรือเข้าถึงสมาชิกด้วย Index ได้โดยตรง (เว้นแต่จะแปลงเป็น List ก่อน)</li>\n        </ul>\n\n        <hr>\n\n        <h2>สรุปและฝึกฝน</h2>\n        <p>Decorators และ Generators เป็นเครื่องมือที่เพิ่มพลังให้กับการเขียนโปรแกรม Python ของคุณ:</p>\n        <ul>\n            <li><strong>Decorators:</strong> ใช้เพิ่มฟังก์ชันการทำงานให้กับฟังก์ชันอื่น โดยใช้ <code>@</code> syntax</li>\n            <li><strong>Generators:</strong> ใช้สร้างลำดับข้อมูลแบบประหยัดหน่วยความจำด้วยคำสั่ง <code>yield</code></li>\n        </ul>\n        <p>แนวคิดเหล่านี้อาจต้องใช้เวลาในการทำความเข้าใจและการฝึกฝนพอสมควร ลองนำไปเขียนโค้ดดูนะครับ:</p>\n        <ul>\n            <li>ลองเขียน Decorator ง่ายๆ ที่พิมพ์ข้อความก่อนและหลังการเรียกฟังก์ชัน</li>\n            <li>ลองเขียน Decorator ที่จับเวลาการทำงานของฟังก์ชัน</li>\n            <li>ลองเขียน Generator Function ที่สร้างเลขฟีโบนัชชี (Fibonacci sequence)</li>\n            <li>ลองเขียน Generator Function ที่อ่านข้อมูลจากไฟล์ขนาดใหญ่ทีละบรรทัด</li>\n        </ul>\n        <p>การฝึกฝนจากตัวอย่างง่ายๆ แล้วค่อยๆ ปรับเปลี่ยนหรือสร้าง Decorator/Generator ที่ซับซ้อนขึ้น จะช่วยให้คุณเข้าใจหลักการทำงานของมันได้ดียิ่งขึ้นครับ ขอให้สนุกกับการเรียนรู้และทดลองเขียนโค้ดครับ!</p>\n\n    </div>', 5);
INSERT INTO `lessons` (`lesson_id`, `course_id`, `title`, `content`, `order_number`) VALUES
(6, 1, 'Exception Handling และ Debugging', '<style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3, h4 {\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2px solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n         h4 {\n            color: #007bff;\n            margin-top: 18px;\n            margin-bottom: 10px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n            font-size: 0.9em;\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n            font-size: 0.9em;\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n         .error-block {\n            background-color: #ffebee; /* Red-ish background */\n            border-left: 4px solid #b71c1c; /* Dark red border */\n            padding: 10px 15px;\n            margin-bottom: 15px;\n            border-radius: 4px;\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            font-size: 0.9em;\n            color: #b71c1c;\n            overflow-x: auto;\n        }\n         .error-block strong {\n             color: #b71c1c;\n         }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>การจัดการข้อผิดพลาด (Exception Handling) และ การดีบัก (Debugging) ใน Python</h1>\n\n        <p>ในการเขียนโปรแกรม ข้อผิดพลาด (Errors) เป็นสิ่งที่เกิดขึ้นได้เสมอ ไม่ว่าจะเป็นความผิดพลาดในการเขียนโค้ด หรือข้อผิดพลาดที่เกิดขึ้นระหว่างโปรแกรมกำลังทำงาน การจัดการกับข้อผิดพลาดเหล่านี้อย่างเหมาะสมเป็นสิ่งสำคัญเพื่อให้โปรแกรมของเราทำงานได้อย่างเสถียร และเราในฐานะโปรแกรมเมอร์ก็ต้องมีวิธีในการค้นหาและแก้ไขข้อผิดพลาดเหล่านั้น (Debugging)</p>\n\n        <h2>การจัดการข้อผิดพลาด (Exception Handling)</h2>\n\n        <p>ใน Python เราแบ่งข้อผิดพลาดหลักๆ ได้เป็นสองประเภท:</p>\n        <ul>\n            <li><strong>Syntax Errors:</strong> ข้อผิดพลาดที่เกิดจากไวยากรณ์ของภาษาผิด โปรแกรมจะไม่สามารถรันได้เลยจนกว่าจะแก้ไข Syntax ให้ถูกต้อง เช่น ลืมปิดวงเล็บ, ใช้เครื่องหมายผิด</li>\n            <li><strong>Runtime Errors (Exceptions):</strong> ข้อผิดพลาดที่เกิดขึ้นระหว่างโปรแกรมกำลังทำงาน แม้ Syntax จะถูกต้องก็ตาม เช่น พยายามหารด้วยศูนย์, พยายามเข้าถึงไฟล์ที่ไม่มีอยู่, พยายามใช้ตัวแปรที่ไม่ได้ประกาศ Exceptions คือกลไกของ Python ที่แจ้งเตือนว่ามีบางอย่างผิดปกติเกิดขึ้น</li>\n        </ul>\n\n        <p><strong>ตัวอย่าง Syntax Error:</strong></p>\n        <pre><code class=\"language-python\">\n# นี่คือ Syntax Error เพราะลืมปิดวงเล็บ\nprint(\"Hello, World!\" # &lt;-- ผิดตรงนี้\n        </code></pre>\n        <p>เมื่อพยายามรันโค้ดด้านบน Python จะแจ้ง Syntax Error และไม่รันโปรแกรม</p>\n\n        <p><strong>ตัวอย่าง Runtime Error (Exception):</strong></p>\n        <pre><code class=\"language-python\">\n# นี่คือ Runtime Error (NameError)\n# โปรแกรมจะรันจนมาถึงบรรทัดนี้ แล้วเกิดข้อผิดพลาด\nprint(undefined_variable)\n        </code></pre>\n        <p>เมื่อรันโค้ดนี้ Python จะรันโปรแกรมได้ แต่เมื่อถึงบรรทัด <code>print(undefined_variable)</code> ก็จะหยุดทำงานและแจ้งข้อผิดพลาดประเภท <code>NameError</code></p>\n\n        <p><strong>ทำไมต้องจัดการ Exception?</strong></p>\n        <p>ถ้าโปรแกรมเกิด Exception ขึ้นโดยที่เราไม่ได้จัดการอะไรเลย โปรแกรมก็จะหยุดทำงานลงทันที (Crash) การจัดการ Exception ช่วยให้เราสามารถ:</p>\n        <ul>\n            <li>ป้องกันโปรแกรม Crash</li>\n            <li>แสดงข้อความแจ้งข้อผิดพลาดที่เป็นมิตรกับผู้ใช้</li>\n            <li>กู้คืนจากข้อผิดพลาดบางประเภท และให้โปรแกรมทำงานต่อไปได้</li>\n            <li>บันทึก Log ข้อผิดพลาดเพื่อนำไปตรวจสอบภายหลัง</li>\n        </ul>\n\n        <h3>โครงสร้าง <code>try</code>, <code>except</code> Block</h3>\n        <p>เป็นโครงสร้างพื้นฐานที่สุดในการจัดการ Exception โดยเราจะวางโค้ดที่เราคิดว่าอาจจะเกิด Exception ไว้ใน Block ของ <code>try</code> และวางโค้ดที่เราต้องการให้ทำงานเมื่อเกิด Exception ไว้ใน Block ของ <code>except</code></p>\n        <pre><code>\ntry:\n    # &lt;-- โค้ดใน Block \'try\' ที่อาจเกิด Exception --&gt;\n    # เช่น รับค่าจากผู้ใช้แล้วแปลงเป็นตัวเลข\n    user_input = input(\"กรุณาป้อนตัวเลขจำนวนเต็ม: \")\n    number = int(user_input) # &lt;-- บรรทัดนี้อาจเกิด ValueError ถ้าผู้ใช้ป้อนข้อความ\n\n    # &lt;-- หากไม่มี Exception ใน try Block โค้ดส่วนที่เหลือใน try จะทำงานต่อไป --&gt;\n    print(\"คุณป้อนตัวเลข:\", number)\n\nexcept ValueError:\n    # &lt;-- โค้ดใน Block \'except\' จะทำงาน \'เฉพาะเมื่อ\' เกิด ValueError ใน try Block --&gt;\n    print(\"ข้อผิดพลาด: คุณป้อนข้อมูลที่ไม่ใช่ตัวเลขจำนวนเต็ม\")\n\n# &lt;-- โค้ดที่อยู่นอก try...except จะทำงานต่อไปหลังจากการจัดการ Exception --&gt;\nprint(\"โปรแกรมทำงานส่วนต่อไป...\")\n        </code></pre>\n        <p><strong>คำอธิบายการทำงาน:</strong></p>\n        <ol>\n            <li>โปรแกรมพยายามรันโค้ดใน Block <code>try</code></li>\n            <li>ถ้าไม่มี <code>ValueError</code> เกิดขึ้นใน Block <code>try</code>, Block <code>except ValueError</code> จะถูกข้ามไป และโปรแกรมจะทำงานต่อจาก Block <code>except</code></li>\n            <li>ถ้าเกิด <code>ValueError</code> ขึ้นใน Block <code>try</code>, การทำงานใน Block <code>try</code> จะหยุดลงทันที และโปรแกรมจะไปทำงานใน Block <code>except ValueError</code> แทน เมื่อทำงานใน Block <code>except</code> เสร็จแล้ว โปรแกรมจะทำงานต่อจาก Block <code>except</code></li>\n            <li>ถ้าเกิด Exception ชนิดอื่นที่ไม่ใช่ <code>ValueError</code> ใน Block <code>try</code> (และไม่มี <code>except</code> Block อื่นสำหรับ Exception ชนิดนั้น), โปรแกรมจะหยุดทำงานและแจ้งข้อผิดพลาดตามปกติ (Crash)</li>\n        </ol>\n\n        <h3>การดักจับ Exception หลายชนิด</h3>\n        <p>เราสามารถมี <code>except</code> Block ได้หลายตัว เพื่อดักจับ Exception ชนิดต่างๆ กัน</p>\n        <pre><code>\ntry:\n    num1_str = input(\"ป้อนตัวตั้ง (ตัวเลข): \")\n    num2_str = input(\"ป้อนตัวหาร (ตัวเลข): \")\n\n    num1 = int(num1_str) # อาจเกิด ValueError\n    num2 = int(num2_str) # อาจเกิด ValueError\n\n    result = num1 / num2 # อาจเกิด ZeroDivisionError ถ้า num2 เป็น 0\n\n    print(\"ผลลัพธ์:\", result)\n\nexcept ValueError:\n    print(\"ข้อผิดพลาด: กรุณาป้อนเฉพาะตัวเลขจำนวนเต็มเท่านั้น\")\n\nexcept ZeroDivisionError:\n    print(\"ข้อผิดพลาด: ไม่สามารถหารด้วยศูนย์ได้\")\n\n# สามารถดักจับ Exception ชนิดแม่ เพื่อครอบคลุม Exception ลูกๆ ของมันได้ด้วย\n# เช่น except Exception as e: จะดักจับ Exception เกือบทุกชนิด\nexcept Exception as e:\n    print(f\"เกิดข้อผิดพลาดที่ไม่คาดคิด: {e}\") # \'as e\' ใช้เก็บ Object Exception เพื่อดูรายละเอียด\n\nprint(\"ดำเนินการต่อไป...\")\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> Python จะตรวจสอบ <code>except</code> Block ตามลำดับ ถ้า Exception ที่เกิดขึ้นตรงกับชนิดใน <code>except</code> ใด Block แรกที่ตรงจะถูกรัน แล้วข้าม <code>except</code> อื่นๆ ไป</p>\n\n        <h3>การใช้ <code>try</code>, <code>except</code>, <code>else</code></h3>\n        <p>Block <code>else</code> จะทำงานก็ต่อเมื่อ Block <code>try</code> ทำงานสำเร็จโดยไม่มี Exception ใดๆ เกิดขึ้นเลย มีประโยชน์สำหรับใส่โค้ดที่ควรทำงานเมื่อทุกอย่างเรียบร้อยดี</p>\n        <pre><code>\ntry:\n    x_str = input(\"ป้อนตัวเลขเพื่อแปลงเป็น Integer: \")\n    x = int(x_str) # อาจเกิด ValueError\nexcept ValueError:\n    print(\"เกิด ValueError: ข้อมูลที่ป้อนไม่ถูกต้อง\")\nelse:\n    # &lt;-- โค้ดใน Block \'else\' จะทำงานเฉพาะเมื่อ try Block สำเร็จโดยไม่มี Exception --&gt;\n    print(\"ไม่มี Exception เกิดขึ้นใน try Block\")\n    print(\"ตัวเลขที่แปลงได้คือ:\", x)\n\nprint(\"จบตัวอย่าง try...except...else\")\n        </code></pre>\n\n        <h3>การใช้ <code>try</code>, <code>except</code>, <code>finally</code></h3>\n        <p>Block <code>finally</code> จะทำงาน <strong>เสมอ</strong> ไม่ว่าจะมี Exception เกิดขึ้นใน Block <code>try</code> หรือไม่ก็ตาม และไม่ว่า Exception นั้นจะถูกดักจับด้วย <code>except</code> หรือไม่ก็ตาม มักใช้สำหรับโค้ดที่ต้องทำงานเพื่อ \"ทำความสะอาด\" หรือปิดทรัพยากรต่างๆ (เช่น ปิดไฟล์, ปิดการเชื่อมต่อฐานข้อมูล) ไม่ว่าจะเกิดอะไรขึ้น</p>\n        <pre><code>\ntry:\n    # ลองเปิดไฟล์อ่าน\n    file = open(\"my_test_file.txt\", \"r\")\n    content = file.read()\n    print(\"เนื้อหาไฟล์:\", content)\n    # อาจเกิด Exception อื่นๆ ขึ้นที่นี่\n\nexcept FileNotFoundError:\n    print(\"ข้อผิดพลาด: ไม่พบไฟล์ \'my_test_file.txt\'\")\nexcept Exception as e:\n    print(f\"เกิดข้อผิดพลาดอื่น: {e}\")\n\nfinally:\n    # &lt;-- โค้ดใน Block \'finally\' จะทำงานเสมอ --&gt;\n    # ตรวจสอบว่าตัวแปร file ถูกสร้างขึ้นและยังไม่ได้ปิดหรือไม่ ก่อนพยายามปิด\n    if \'file\' in locals() and not file.closed:\n        file.close()\n        print(\"ปิดไฟล์แล้วใน finally block\")\n    else:\n        print(\"ไม่ได้เปิดไฟล์ หรือไฟล์ถูกปิดไปแล้ว\")\n\nprint(\"จบตัวอย่าง try...except...finally\")\n\n# ลองรันโค้ดนี้อีกครั้ง แต่สร้างไฟล์ my_test_file.txt ไว้ก่อน\n# หรือลองรันโค้ดที่ทำให้เกิด ZeroDivisionError ใน try Block ดู\n# คุณจะเห็นว่า finally block ถูกรันเสมอ\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> ไม่ว่าไฟล์จะถูกเปิดสำเร็จแล้วอ่านได้, ไฟล์ไม่ถูกพบ, หรือเกิด Exception อื่นๆ ขึ้นใน Block <code>try</code> โค้ดใน Block <code>finally</code> ก็จะถูกรันเสมอเพื่อให้มั่นใจว่าไฟล์ถูกปิด</p>\n\n        <h3>การโยน Exception ด้วย <code>raise</code></h3>\n        <p>บางครั้งเราอาจต้องการให้เกิด Exception ขึ้นมาเองโดยเจตนา เช่น เมื่อตรวจสอบพบว่าค่าที่รับเข้ามาไม่ถูกต้อง หรือเมื่อเงื่อนไขบางอย่างไม่เป็นไปตามที่คาดไว้ เราใช้คำสั่ง <code>raise</code> เพื่อทำเช่นนั้น</p>\n        <pre><code>\ndef set_age(age):\n    if age &lt; 0:\n        # โยน Exception ชนิด ValueError ขึ้นมาเอง\n        raise ValueError(\"อายุต้องไม่เป็นค่าลบ\")\n    elif age &gt; 120:\n        raise ValueError(\"อายุไม่น่าจะเกิน 120 ปี\")\n    else:\n        print(\"ตั้งอายุเป็น:\", age)\n\n# ลองเรียกใช้ฟังก์ชันนี้ใน try...except block เพื่อดักจับ Exception ที่เรา raise ขึ้นมา\ntry:\n    set_age(-10)\nexcept ValueError as e:\n    print(\"ดักจับ ValueError ได้:\", e) # Output: ดักจับ ValueError ได้: อายุต้องไม่เป็นค่าลบ\n\ntry:\n    set_age(30)\nexcept ValueError as e:\n    print(\"ดักจับ ValueError ได้:\", e) # บรรทัดนี้จะไม่ทำงาน เพราะไม่มี Exception เกิดขึ้น\n        </code></pre>\n\n        <h3>Custom Exceptions (เบื้องต้น)</h3>\n        <p>เราสามารถสร้าง Exception ชนิดของเราเองได้ โดยสร้าง Class ที่สืบทอด (Inherit) มาจาก Class <code>Exception</code> หรือ Class ลูกๆ ของ <code>Exception</code></p>\n        <pre><code>\n# สร้าง Custom Exception ของเราเอง\nclass InvalidUserDataError(Exception):\n    \"\"\"Exception สำหรับข้อมูลผู้ใช้ที่ไม่ถูกต้อง\"\"\"\n    pass # ในกรณีง่ายๆ แค่สืบทอดมาก็พอแล้ว\n\n# ฟังก์ชันที่อาจโยน Custom Exception ของเรา\ndef process_user_data(user_data):\n    if user_data == \"\" or len(user_data) &lt; 5:\n        raise InvalidUserDataError(\"ข้อมูลผู้ใช้สั้นเกินไปหรือไม่ถูกต้อง\")\n    print(\"ประมวลผลข้อมูลผู้ใช้:\", user_data)\n\n# ดักจับ Custom Exception\ntry:\n    process_user_data(\"Bob\")\nexcept InvalidUserDataError as e:\n    print(\"เกิดข้อผิดพลาดข้อมูลผู้ใช้:\", e) # Output: เกิดข้อผิดพลาดข้อมูลผู้ใช้: ข้อมูลผู้ใช้สั้นเกินไปหรือไม่ถูกต้อง\n\ntry:\n    process_user_data(\"Alice Wonderland\")\nexcept InvalidUserDataError as e:\n    print(\"เกิดข้อผิดพลาดข้อมูลผู้ใช้:\", e) # บรรทัดนี้จะไม่ทำงาน\n        </code></pre>\n        <p>การสร้าง Custom Exception ช่วยให้โค้ดของเราสื่อความหมายได้ชัดเจนขึ้นว่าข้อผิดพลาดที่เกิดขึ้นเป็นข้อผิดพลาดประเภทใด</p>\n\n        <hr>\n\n        <h2>การดีบัก (Debugging)</h2>\n\n        <p>Debugging คือกระบวนการในการ <strong>ค้นหา</strong> และ <strong>แก้ไข</strong> ข้อผิดพลาด (Bugs) ในโค้ดของเรา ไม่ว่าจะเป็น Syntax Errors, Runtime Errors, หรือที่ยากที่สุดคือ <strong>Logic Errors</strong></p>\n        <ul>\n            <li><strong>Logic Errors:</strong> โปรแกรมสามารถรันได้จนจบโดยไม่เกิด Exception แต่ผลลัพธ์ที่ได้ไม่ถูกต้องตามที่เราคาดหวัง การดีบัก Logic Error มักต้องอาศัยเครื่องมือหรือเทคนิคเพื่อทำความเข้าใจว่าโปรแกรมกำลังทำอะไรอยู่ และทำไมถึงได้ผลลัพธ์ที่ไม่ถูกต้อง</li>\n        </ul>\n\n        <h3>การอ่านข้อความ Error (Tracebacks)</h3>\n        <p>เมื่อเกิด Exception ที่ไม่ได้ถูกจัดการ Python จะแสดงข้อความ Error ที่เรียกว่า Traceback การอ่าน Traceback เป็นทักษะพื้นฐานที่สำคัญที่สุดในการดีบัก เพราะมันบอกว่าเกิดอะไรขึ้น ที่ไหน และลำดับการเรียกฟังก์ชันที่นำไปสู่ข้อผิดพลาดนั้น</p>\n        <p><strong>ตัวอย่าง Traceback:</strong> (สมมติว่าโค้ดนี้อยู่ในไฟล์ชื่อ <code>my_program.py</code>)</p>\n        <pre class=\"error-block\"><code>\nTraceback (most recent call last):\n  File \"my_program.py\", line 10, in &lt;module&gt;\n    result = divide(10, 0)\n  File \"my_program.py\", line 3, in divide\n    return a / b\nZeroDivisionError: division by zero\n        </code></pre>\n        <p><strong>วิธีอ่าน Traceback:</strong></p>\n        <ol>\n            <li><strong>ดูบรรทัดสุดท้ายก่อน:</strong> บรรทัดสุดท้าย <code>ZeroDivisionError: division by zero</code> บอก <strong>ชนิด</strong> ของ Error และ <strong>ข้อความอธิบาย</strong> สั้นๆ ว่าเกิดอะไรขึ้น</li>\n            <li><strong>ไล่ดูจากล่างขึ้นบน:</strong> ส่วนด้านบนของ Traceback แสดงลำดับการเรียกฟังก์ชัน (Call Stack) ที่นำไปสู่ Error</li>\n            <li><code>File \"my_program.py\", line 3, in divide</code>: บอกว่า Error เกิดขึ้นในไฟล์ <code>my_program.py</code> ที่บรรทัด 3 ภายในฟังก์ชันชื่อ <code>divide</code> และแสดงบรรทัดโค้ดนั้น (<code>return a / b</code>)</li>\n            <li><code>File \"my_program.py\", line 10, in &lt;module&gt;</code>: บอกว่าฟังก์ชัน <code>divide</code> ถูกเรียกจากไฟล์ <code>my_program.py</code> ที่บรรทัด 10 ภายใน Module หลัก (<code>&lt;module&gt;</code>) และแสดงบรรทัดโค้ดนั้น (<code>result = divide(10, 0)</code>)</li>\n        </ol>\n        <p>การอ่าน Traceback จะช่วยให้คุณระบุต้นตอของปัญหาและตำแหน่งในโค้ดที่เกิด Error ได้</p>\n\n        <h3>เทคนิค Print Debugging</h3>\n        <p>เป็นเทคนิคที่ง่ายที่สุดแต่ก็มีประสิทธิภาพมากในการหา Logic Error คือการใช้ฟังก์ชัน <code>print()</code> เพื่อแสดงค่าของตัวแปร หรือเพื่อตรวจสอบว่าโปรแกรมทำงานมาถึงจุดที่เราสงสัยหรือไม่</p>\n        <pre><code>\ndef apply_discount(price, discount_percentage):\n    print(f\"DEBUG: Price received: {price}\") # ตรวจสอบค่า price ที่รับมา\n    print(f\"DEBUG: Discount percentage received: {discount_percentage}\") # ตรวจสอบค่า discount\n\n    if discount_percentage &lt; 0 or discount_percentage &gt; 100:\n        print(\"DEBUG: Invalid discount percentage detected!\") # ตรวจสอบว่าเข้ามาในเงื่อนไขนี้หรือไม่\n        # อาจจะ raise Exception ที่นี่แทน print ก็ได้\n        return price # หรือจัดการข้อผิดพลาดอย่างอื่น\n\n    discount_amount = price * (discount_percentage / 100)\n    print(f\"DEBUG: Calculated discount amount: {discount_amount}\") # ตรวจสอบค่าที่คำนวณได้\n\n    final_price = price - discount_amount\n    print(f\"DEBUG: Calculated final price: {final_price}\") # ตรวจสอบผลลัพธ์\n\n    return final_price\n\n# สมมติว่าผลลัพธ์ไม่ถูกต้องเมื่อเรียกด้วยค่าบางค่า\nfinal = apply_discount(100, 10)\nprint(\"Final price 1:\", final) # คาดหวัง 90.0\n\nfinal = apply_discount(200, 150) # ค่า discount ผิด\nprint(\"Final price 2:\", final) # คาดหวัง 200.0\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong> การใส่คำสั่ง <code>print()</code> ที่มีข้อความนำหน้าบ่งบอกว่าเป็น Debug Message และแสดงค่าตัวแปร จะช่วยให้เราเห็นว่าโปรแกรมทำงานไปตามที่เราคิดหรือไม่ และค่าตัวแปร ณ จุดต่างๆ มีค่าเท่าที่เราคาดหวังหรือไม่</p>\n\n        <h3>การใช้ Debugger (Interactive Debugging)</h3>\n        <p>Debugger เป็นเครื่องมือที่ทรงพลังที่สุดในการหา Logic Error ช่วยให้เราสามารถ \"หยุด\" การทำงานของโปรแกรมชั่วคราว แล้ว \"ก้าวผ่าน\" โค้ดทีละบรรทัด พร้อมทั้งตรวจสอบค่าของตัวแปรต่างๆ ได้แบบ Real-time</p>\n        <p>เครื่องมือเขียนโค้ด (IDE หรือ Text Editor) ยอดนิยมส่วนใหญ่มี Debugger ในตัว (เช่น VS Code, PyCharm, IDLE) หรือจะใช้ Debugger แบบ Command-line ของ Python เองก็ได้ คือ <code>pdb</code></p>\n        <p>แนวคิดหลักในการใช้ Debugger (ไม่ว่าจะใช้เครื่องมือไหน):</p>\n        <ul>\n            <li><strong>ตั้ง Breakpoint:</strong> คือการระบุบรรทัดในโค้ดที่ต้องการให้โปรแกรมหยุดทำงานชั่วคราว เมื่อโปรแกรมรันมาถึงบรรทัดนี้จะหยุด และเข้าสู่โหมด Debug (เหมือนกด Pause ในวิดีโอ)</li>\n            <li><strong>Step Over:</strong> รันโค้ดบรรทัดปัจจุบันแล้วข้ามไปยังบรรทัดถัดไป ในฟังก์ชันเดียวกัน (ถ้าบรรทัดปัจจุบันมีการเรียกฟังก์ชันอื่น จะรันฟังก์ชันนั้นจนจบแล้วมาหยุดที่บรรทัดถัดไป)</li>\n            <li><strong>Step Into:</strong> หากบรรทัดปัจจุบันมีการเรียกฟังก์ชันอื่น เมื่อใช้ Step Into จะเข้าไปในโค้ดของฟังก์ชันที่ถูกเรียกนั้น</li>\n            <li><strong>Step Out:</strong> รันโค้ดส่วนที่เหลือในฟังก์ชันปัจจุบันจนจบ แล้วออกจากฟังก์ชัน กลับไปหยุดที่บรรทัดถัดจากจุดที่ฟังก์ชันนี้ถูกเรียก</li>\n            <li><strong>Continue:</strong> สั่งให้โปรแกรมรันต่อจนกว่าจะเจอ Breakpoint ถัดไป หรือจบโปรแกรม</li>\n            <li><strong>Inspect Variables:</strong> ในโหมด Debug จะสามารถดูค่าของตัวแปรทั้งหมดที่อยู่ใน Scope ปัจจุบันได้</li>\n            <li><strong>Watch Expressions:</strong> ตั้งค่า Expression (เช่น <code>x + y</code>, <code>my_list[0]</code>) เพื่อดูค่าของมันได้ตลอดเวลาเมื่อก้าวผ่านโค้ด</li>\n        </ul>\n        <p><strong>ขั้นตอนการ Debug เบื้องต้นด้วย Debugger:</strong></p>\n        <ol>\n            <li>ระบุตำแหน่งในโค้ดที่สงสัยว่า Logic อาจจะผิด หรือตำแหน่งที่ Error เกิดขึ้น</li>\n            <li>ตั้ง Breakpoint ที่บรรทัดนั้น หรือก่อนหน้านั้นเล็กน้อย</li>\n            <li>รันโปรแกรมในโหมด Debug</li>\n            <li>เมื่อโปรแกรมหยุดที่ Breakpoint ให้ใช้ Step Over, Step Into, Step Out เพื่อตามดูการทำงานของโปรแกรมทีละบรรทัด</li>\n            <li>ในแต่ละขั้นตอน ให้ตรวจสอบค่าของตัวแปรต่างๆ ที่เกี่ยวข้องว่าตรงตามที่เราคาดหวังหรือไม่</li>\n            <li>เมื่อพบว่าค่าตัวแปรเริ่มไม่ตรงตามที่คาดหวัง นั่นคือจุดที่ Logic ผิด</li>\n            <li>แก้ไขโค้ด แล้วลอง Debug ใหม่เพื่อยืนยันว่าแก้ปัญหาได้แล้ว</li>\n        </ol>\n\n        <h3>เทคนิคการดีบักอื่นๆ</h3>\n        <ul>\n            <li><strong>Rubber Duck Debugging:</strong> อธิบายโค้ดและ Logic การทำงานให้ใครสักคนฟัง (หรือตุ๊กตาเป็ดยาง!) บางครั้งแค่การอธิบายกระบวนการคิดของเราออกมาดังๆ ก็ช่วยให้เราเห็นข้อผิดพลาดได้เอง</li>\n            <li><strong>Simplifying the Problem:</strong> หากโปรแกรมซับซ้อนเกินไป ให้ลองตัดส่วนอื่นๆ ที่ไม่เกี่ยวข้องออกไป (อาจจะโดยการ Comment โค้ดส่วนนั้นๆ) แล้วทดสอบเฉพาะส่วนที่สงสัยในบริบทที่เรียบง่ายขึ้น</li>\n            <li><strong>Isolating the Bug:</strong> พยายามแยกปัญหาให้อยู่ในส่วนที่เล็กที่สุดของโค้ด</li>\n        </ul>\n\n        <hr>\n\n        <h2>สรุปและฝึกฝน</h2>\n        <p>การจัดการข้อผิดพลาดและการดีบักเป็นส่วนสำคัญของกระบวนการพัฒนาซอฟต์แวร์:</p>\n        <ul>\n            <li><strong>Exception Handling:</strong> ใช้ <code>try</code>, <code>except</code>, <code>else</code>, <code>finally</code> เพื่อจัดการกับ Runtime Errors อย่างสง่างาม ป้องกันโปรแกรม Crash และแสดงข้อความที่เข้าใจง่าย</li>\n            <li><strong>Debugging:</strong> ใช้ทักษะการอ่าน Traceback, Print Debugging และเครื่องมือ Debugger เพื่อค้นหาและแก้ไขข้อผิดพลาด โดยเฉพาะ Logic Errors</li>\n        </ul>\n        <p>อย่าท้อแท้เมื่อเจอข้อผิดพลาดนะครับ! ทุกข้อผิดพลาดคือโอกาสในการเรียนรู้ ลองฝึกใช้เทคนิค Exception Handling เพื่อทำให้โปรแกรมของคุณแข็งแกร่งขึ้น และฝึกใช้ Debugger ใน IDE ที่คุณใช้อยู่เพื่อทำความเข้าใจว่าโค้ดทำงานอย่างไร และหา Bug ที่ซ่อนอยู่</p>\n        <p>ยิ่งฝึกฝนการดีบักมากเท่าไหร่ ก็จะยิ่งหาและแก้ปัญหาได้เร็วขึ้นเท่านั้น ขอให้สนุกกับการเป็นนักสืบหา Bug นะครับ!</p>\n\n    </div>', 6),
(7, 1, 'NumPy และ Pandas Basics', '    <style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3, h4 {\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2px solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n         h4 {\n            color: #007bff;\n            margin-top: 18px;\n            margin-bottom: 10px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n            font-size: 0.9em;\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n            font-size: 0.9em;\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n         table {\n            border-collapse: collapse;\n            width: 100%;\n            margin: 20px 0;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: left;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>NumPy และ Pandas Basics ใน Python</h1>\n\n        <p>เมื่อพูดถึงการทำงานกับข้อมูลเชิงตัวเลข, ข้อมูลทางวิทยาศาสตร์, หรือข้อมูลที่เป็นตารางใน Python สองไลบรารีแรกที่เราจะนึกถึงและมีความสำคัญอย่างยิ่งคือ <strong>NumPy</strong> และ <strong>Pandas</strong></p>\n        <ul>\n            <li><strong>NumPy (Numerical Python):</strong> จัดการกับข้อมูลตัวเลขประสิทธิภาพสูง โดยมีโครงสร้างข้อมูลหลักคือ N-dimensional Array (ndarray)</li>\n            <li><strong>Pandas (Panel Data Analysis):</strong> จัดการและวิเคราะห์ข้อมูลที่เป็นโครงสร้างแบบตารางได้อย่างง่ายดาย โดยมีโครงสร้างข้อมูลหลักคือ Series และ DataFrame ซึ่งสร้างขึ้นบนพื้นฐานของ NumPy</li>\n        </ul>\n        <p>เราจำเป็นต้องติดตั้งไลบรารีทั้งสองก่อนใช้งาน (ถ้ายังไม่ได้ติดตั้ง):</p>\n        <pre><code>\npip install numpy pandas\n        </code></pre>\n        <p>และเมื่อต้องการใช้งาน ก็ต้อง Import เข้ามาในโค้ดเสมอ (นิยมใช้ Alias เป็น <code>np</code> และ <code>pd</code>):</p>\n        <pre><code>\nimport numpy as np\nimport pandas as pd\n        </code></pre>\n\n        <h2>NumPy Basics</h2>\n\n        <p>หัวใจของ NumPy คือ <strong>ndarray</strong> (N-dimensional array) ซึ่งเป็นโครงสร้างข้อมูลแบบ Grid ที่มีสมาชิกเป็นชนิดข้อมูลเดียวกันทั้งหมด มีประสิทธิภาพสูงกว่า Python List ปกติมากสำหรับการคำนวณทางคณิตศาสตร์และวิทยาศาสตร์</p>\n\n        <h3>การสร้าง NumPy Array</h3>\n        <p>สามารถสร้าง Array ได้หลายวิธี:</p>\n        <ul>\n            <li>สร้างจาก Python List หรือ Tuple ด้วย <code>np.array()</code></li>\n            <li>สร้าง Array ที่มีค่าเริ่มต้นตามต้องการด้วยฟังก์ชันต่างๆ เช่น <code>np.zeros()</code>, <code>np.ones()</code>, <code>np.arange()</code>, <code>np.linspace()</code></li>\n        </ul>\n        <pre><code>\n# สร้าง Array จาก Python List\nlist1 = [1, 2, 3, 4, 5]\nnumpy_array_from_list = np.array(list1)\nprint(\"Array จาก List:\", numpy_array_from_list)\nprint(\"ชนิดข้อมูลของ Array:\", type(numpy_array_from_list))\n\n# สร้าง Array 2 มิติ จาก List ซ้อน List\nlist2 = [[1, 2, 3], [4, 5, 6]]\nnumpy_array_2d = np.array(list2)\nprint(\"\\nArray 2 มิติ:\\n\", numpy_array_2d)\n\n# สร้าง Array ที่มีค่าเป็นศูนย์ทั้งหมด\nzeros_array = np.zeros((2, 3)) # (จำนวนแถว, จำนวนคอลัมน์)\nprint(\"\\nArray ศูนย์:\\n\", zeros_array)\n\n# สร้าง Array ที่มีค่าเป็นหนึ่งทั้งหมด\nones_array = np.ones((3, 2))\nprint(\"\\nArray หนึ่ง:\\n\", ones_array)\n\n# สร้าง Array ลำดับตัวเลข (คล้าย range แต่คืนค่าเป็น numpy array)\nrange_array = np.arange(0, 10, 2) # (เริ่มต้น, สิ้นสุด (ไม่รวม), ช่วงห่าง)\nprint(\"\\nArray range:\", range_array)\n\n# สร้าง Array ลำดับตัวเลขแบบแบ่งเท่าๆ กัน\nlinspace_array = np.linspace(0, 1, 5) # (เริ่มต้น, สิ้นสุด (รวม), จำนวนสมาชิกที่ต้องการ)\nprint(\"\\nArray linspace:\", linspace_array)\n        </code></pre>\n\n        <h3>Attributes สำคัญของ Array</h3>\n        <p>Array แต่ละตัวมี Attributes ที่บอกลักษณะของมัน เช่น</p>\n        <ul>\n            <li><code>shape</code>: รูปทรงของ Array (จำนวนสมาชิกในแต่ละมิติ)</li>\n            <li><code>ndim</code>: จำนวนมิติของ Array</li>\n            <li><code>dtype</code>: ชนิดข้อมูลของสมาชิกใน Array</li>\n            <li><code>size</code>: จำนวนสมาชิกรวมทั้งหมดใน Array</li>\n        </ul>\n        <pre><code>\narr = np.array([[10, 20, 30], [40, 50, 60]]) # Array 2x3\n\nprint(\"Array:\\n\", arr)\nprint(\"Shape:\", arr.shape)   # Output: (2, 3)\nprint(\"จำนวนมิติ:\", arr.ndim) # Output: 2\nprint(\"ชนิดข้อมูลของสมาชิก:\", arr.dtype) # Output: int64 หรือ int32 (ขึ้นอยู่กับระบบ)\nprint(\"จำนวนสมาชิกรวม:\", arr.size)     # Output: 6\n        </code></pre>\n\n        <h3>การดำเนินการพื้นฐานกับ Array</h3>\n        <p>NumPy ช่วยให้การคำนวณทางคณิตศาสตร์กับทั้ง Array ทำได้ง่ายและรวดเร็วมากๆ โดยส่วนใหญ่จะเป็นการดำเนินการแบบ Element-wise (กระทำกับสมาชิกที่ตำแหน่งเดียวกัน)</p>\n\n        <h4>Element-wise Operations</h4>\n        <p>เครื่องหมายทางคณิตศาสตร์พื้นฐาน (+, -, *, /) เมื่อใช้กับ NumPy Array ที่มี Shape เหมือนกัน จะเป็นการกระทำกับสมาชิกที่ตำแหน่งเดียวกัน</p>\n        <pre><code>\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\n\nprint(\"arr1 + arr2:\", arr1 + arr2)   # Output: [5 7 9]\nprint(\"arr1 - arr2:\", arr1 - arr2)   # Output: [-3 -3 -3]\nprint(\"arr1 * arr2:\", arr1 * arr2)   # Output: [4 10 18]\nprint(\"arr1 / arr2:\", arr1 / arr2)   # Output: [0.25 0.4  0.5 ]\n\n# เปรียบเทียบกับการบวก List (เป็นการต่อ List)\nlist_a = [1, 2]\nlist_b = [3, 4]\nprint(\"List + List:\", list_a + list_b) # Output: [1, 2, 3, 4]\n# print(list_a * list_b) # Error สำหรับ List ปกติ\n        </code></pre>\n\n        <h4>Broadcasting</h4>\n        <p>NumPy มีกฎในการดำเนินการกับ Array ที่มี Shape ต่างกัน เรียกว่า Broadcasting ทำให้สามารถทำ Element-wise Operation ได้ แม้ Shape จะไม่เหมือนกันทั้งหมด เช่น การดำเนินการระหว่าง Array กับ Scalar (ค่าเดียว)</p>\n         <pre><code>\narr = np.array([[1, 2, 3], [4, 5, 6]]) # Shape (2, 3)\nscalar = 10\n\nprint(\"Array + Scalar:\\n\", arr + scalar) # Output: [[11 12 13] [14 15 16]] (10 ถูก \"กระจาย\" ไปบวกกับทุกสมาชิก)\n\narr3 = np.array([[1, 2], [3, 4]]) # Shape (2, 2)\narr4 = np.array([10, 20])      # Shape (2,)\nprint(\"\\nArray (2,2) + Array (2,):\\n\", arr3 + arr4)\n# arr4 [10, 20] จะถูก broadcast ให้เป็น [[10, 20], [10, 20]] เพื่อให้บวกกันได้\n\n# Output:\n# [[11 22]\n#  [13 24]]\n         </code></pre>\n\n        <h4>Universal Functions (ufuncs)</h4>\n        <p>NumPy มีฟังก์ชันทางคณิตศาสตร์มากมาย (เช่น sin, cos, sqrt, log, exp, sum, mean, max, min) ที่สามารถนำมาใช้กับ Array ได้โดยตรง ซึ่งจะดำเนินการแบบ Element-wise อย่างรวดเร็ว</p>\n        <pre><code>\narr = np.array([1, 4, 9, 16])\n\nprint(\"Square root:\", np.sqrt(arr)) # Output: [1. 2. 3. 4.]\nprint(\"Sum:\", np.sum(arr))         # Output: 30 (ผลรวมสมาชิกรวมทั้งหมด)\nprint(\"Mean:\", np.mean(arr))        # Output: 7.5 (ค่าเฉลี่ย)\nprint(\"Max:\", np.max(arr))          # Output: 16 (ค่าสูงสุด)\nprint(\"Min:\", np.min(arr))          # Output: 1 (ค่าต่ำสุด)\n        </code></pre>\n        <p>สามารถหาผลรวมหรือค่าเฉลี่ยตามแกน (Axis) ได้ด้วย (axis=0 คือตามคอลัมน์, axis=1 คือตามแถว)</p>\n        <pre><code>\narr_2d = np.array([[1, 2, 3], [4, 5, 6]])\nprint(\"Array 2D:\\n\", arr_2d)\n\nprint(\"Sum ตามคอลัมน์ (axis=0):\", np.sum(arr_2d, axis=0)) # Output: [5 7 9]\nprint(\"Sum ตามแถว (axis=1):\", np.sum(arr_2d, axis=1))     # Output: [6 15]\n        </code></pre>\n\n        <h3>Indexing และ Slicing Array</h3>\n        <p>การเลือกสมาชิกหรือส่วนย่อยของ Array ทำได้คล้าย List แต่มีความสามารถในการเลือกแบบหลายมิติ</p>\n        <pre><code>\narr = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) # Array 3x3\nprint(\"Original array:\\n\", arr)\n\n# เข้าถึงสมาชิกตัวเดียว (ใช้ [row, column])\nprint(\"สมาชิกตำแหน่ง [0, 1]:\", arr[0, 1]) # Output: 20\n\n# เข้าถึงทั้งแถว\nprint(\"แถวแรก:\", arr[0, :])     # หรือเขียนสั้นๆ ว่า arr[0] Output: [10 20 30]\nprint(\"แถวที่สอง:\", arr[1])     # Output: [40 50 60]\n\n# เข้าถึงทั้งคอลัมน์\nprint(\"คอลัมน์แรก:\", arr[:, 0])   # Output: [10 40 70]\nprint(\"คอลัมน์ที่สอง:\", arr[:, 1]) # Output: [20 50 80]\n\n# Slicing (ตัดแบ่ง Array) ใช้ [start:stop:step]\nprint(\"แถว 0 ถึง 1 (ไม่รวม 2):\", arr[0:2, :]) # Output: [[10 20 30] [40 50 60]]\nprint(\"คอลัมน์ 1 ถึง 2 (ไม่รวม 3):\", arr[:, 1:3]) # Output: [[20 30] [50 60] [80 90]]\n\n# Slicing ทั้งแถวและคอลัมน์\nprint(\"Sub-array แถว 0:2, คอลัมน์ 1:3:\\n\", arr[0:2, 1:3])\n# Output:\n# [[20 30]\n#  [50 60]]\n\n# Boolean Indexing (เลือกสมาชิกตามเงื่อนไข)\nprint(\"สมาชิกที่มากกว่า 50:\", arr[arr > 50]) # Output: [60 70 80 90] (คืนค่าเป็น Array 1 มิติ)\nprint(\"สมาชิกที่เป็นเลขคู่:\", arr[arr % 2 == 0]) # Output: [10 20 30 40 50 60 70 80 90]\n        </code></pre>\n\n        <h2>Pandas Basics</h2>\n\n        <p>Pandas สร้างขึ้นบนพื้นฐานของ NumPy และออกแบบมาเพื่องานวิเคราะห์ข้อมูลโดยเฉพาะ โดยมีโครงสร้างข้อมูลหลัก 2 ชนิด:</p>\n        <ul>\n            <li><strong>Series:</strong> โครงสร้างข้อมูล 1 มิติ คล้าย Array ของ NumPy แต่มี <strong>Label (Index)</strong> กำกับแต่ละสมาชิก ทำให้เราอ้างถึงสมาชิกได้ด้วย Label นอกเหนือจากตำแหน่ง</li>\n            <li><strong>DataFrame:</strong> โครงสร้างข้อมูล 2 มิติ คล้ายตารางใน Spreadsheet หรือฐานข้อมูล ประกอบด้วย Series หลายๆ Series ที่มี Index ร่วมกัน เปรียบเสมือนตารางที่มีแถว (Rows) และคอลัมน์ (Columns)</li>\n        </ul>\n\n        <h3>Pandas Series</h3>\n        <p>Series คือ Array 1 มิติที่มี Index</p>\n        <pre><code>\n# สร้าง Series จาก List\ns = pd.Series([10, 20, 30, 40])\nprint(\"Series จาก List:\\n\", s)\n# Index จะเป็นตัวเลข 0, 1, 2, 3 โดยอัตโนมัติ\n\n# สร้าง Series พร้อมกำหนด Index เอง\ns_with_index = pd.Series([100, 200, 300], index=[\'a\', \'b\', \'c\'])\nprint(\"\\nSeries กำหนด Index เอง:\\n\", s_with_index)\n\n# สร้าง Series จาก Dictionary (Key จะกลายเป็น Index)\ndata_dict = {\'apple\': 50, \'banana\': 100, \'cherry\': 150}\ns_from_dict = pd.Series(data_dict)\nprint(\"\\nSeries จาก Dict:\\n\", s_from_dict)\n\n# เข้าถึงสมาชิก Series ด้วย Index\nprint(\"ค่าที่ Index \'b\':\", s_with_index[\'b\']) # ใช้ Label\nprint(\"ค่าที่ Index ตำแหน่ง 1:\", s_with_index.iloc[1]) # ใช้ตำแหน่ง Integer (iloc ย่อมาจาก integer location)\n\n# Slicing Series\nprint(\"Slicing s_with_index จาก \'a\' ถึง \'b\':\\n\", s_with_index[\'a\':\'b\']) # Inclusive สำหรับ Label Slicing\nprint(\"Slicing s_with_index จากตำแหน่ง 0 ถึง 1 (ไม่รวม 2):\", s_with_index.iloc[0:2]) # Exclusive สำหรับ Integer Slicing\n        </code></pre>\n\n        <h3>Pandas DataFrame</h3>\n        <p>DataFrame คือตารางข้อมูลหลักใน Pandas แต่ละคอลัมน์ของ DataFrame คือ Series หนึ่งตัว</p>\n        <p><strong>การสร้าง DataFrame:</strong> นิยมสร้างจาก Dictionary ที่แต่ละ Key เป็นชื่อคอลัมน์ และ Value เป็น List หรือ Array ของข้อมูลในคอลัมน์นั้น</p>\n        <pre><code>\n# สร้าง DataFrame จาก Dictionary of Lists\ndata = {\n    \'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eve\'],\n    \'Age\': [25, 30, 35, 28, 22],\n    \'City\': [\'New York\', \'London\', \'Paris\', \'Tokyo\', \'New York\']\n}\ndf = pd.DataFrame(data)\nprint(\"DataFrame ที่สร้างขึ้น:\\n\", df)\n\n# สร้าง DataFrame จาก List of Dictionaries\nlist_of_dicts = [\n    {\'Name\': \'Frank\', \'Age\': 40, \'Job\': \'Engineer\'},\n    {\'Name\': \'Grace\', \'Age\': 29, \'Job\': \'Doctor\'}\n]\ndf_from_list_dict = pd.DataFrame(list_of_dicts)\nprint(\"\\nDataFrame จาก List of Dictionaries:\\n\", df_from_list_dict)\n\n# สร้าง DataFrame จากไฟล์ CSV (เป็นวิธีที่พบบ่อยที่สุด)\n# df_from_csv = pd.read_csv(\'ชื่อไฟล์.csv\') # ต้องมีไฟล์ชื่อนี้อยู่ในโฟลเดอร์เดียวกัน หรือระบุ path เต็ม\n# print(\"\\nDataFrame จากไฟล์ CSV (แสดง 5 แถวแรก):\\n\", df_from_csv.head())\n        </code></pre>\n\n        <h3>การดูข้อมูลเบื้องต้นใน DataFrame</h3>\n        <p>มีเมธอดและ Attributes ที่ช่วยให้สำรวจข้อมูลได้อย่างรวดเร็ว</p>\n        <pre><code>\n# แสดง 5 แถวแรก (หรือระบุจำนวนที่ต้องการ)\nprint(\"5 แถวแรก:\\n\", df.head())\nprint(\"\\n3 แถวแรก:\\n\", df.head(3))\n\n# แสดง 5 แถวสุดท้าย (หรือระบุจำนวนที่ต้องการ)\nprint(\"\\n5 แถวสุดท้าย:\\n\", df.tail())\n\n# สรุปข้อมูลเบื้องต้น (ชนิดข้อมูล, จำนวนค่าที่ไม่ใช่ null)\nprint(\"\\nข้อมูล DataFrame (info()):\")\ndf.info()\n\n# สรุปค่าสถิติเบื้องต้นของคอลัมน์ตัวเลข (นับจำนวน, ค่าเฉลี่ย, ค่าเบี่ยงเบนมาตรฐาน, ค่าต่ำสุด, สูงสุด, quartile)\nprint(\"\\nค่าสถิติเบื้องต้น (describe()):\\n\", df.describe())\n\n# Attributes อื่นๆ\nprint(\"\\nShape (จำนวนแถว, คอลัมน์):\", df.shape)\nprint(\"ชื่อคอลัมน์:\", df.columns)\nprint(\"Index ของแถว:\", df.index)\nprint(\"ชนิดข้อมูลของแต่ละคอลัมน์:\\n\", df.dtypes)\n        </code></pre>\n\n        <h3>การเลือกข้อมูล (Data Selection)</h3>\n        <p>เราสามารถเลือกข้อมูลเฉพาะบางคอลัมน์ บางแถว หรือเลือกตามเงื่อนไขได้หลายวิธี</p>\n\n        <h4>เลือกคอลัมน์</h4>\n        <pre><code>\n# เลือกคอลัมน์เดียว (จะได้ Series)\nprint(\"เลือกคอลัมน์ \'Name\' (Series):\\n\", df[\'Name\'])\n# หรือใช้ . ตามด้วยชื่อคอลัมน์ (ใช้ได้ถ้าชื่อคอลัมน์ไม่มีช่องว่างหรืออักขระพิเศษ)\nprint(\"\\nเลือกคอลัมน์ \'Age\' (ใช้ . syntax):\\n\", df.Age)\n\n# เลือกหลายคอลัมน์ (จะได้ DataFrame) - ต้องใช้ List ของชื่อคอลัมน์\nprint(\"\\nเลือกคอลัมน์ \'Name\' และ \'City\' (DataFrame):\\n\", df[[\'Name\', \'City\']]) # สังเกตวงเล็บสองชั้น\n        </code></pre>\n\n        <h4>เลือกแถว: <code>.loc[]</code> และ <code>.iloc[]</code></h4>\n        <p>Pandas มีวิธีการเลือกแถวหลักๆ สองแบบ:</p>\n        <ul>\n            <li><code>.loc[]</code>: ใช้เลือกตาม **Label (Index) ของแถว** และ **Label (ชื่อ) ของคอลัมน์**</li>\n            <li><code>.iloc[]</code>: ใช้เลือกตาม **ตำแหน่งที่เป็น Integer (Index ตัวเลข)** ของแถวและคอลัมน์ (คล้ายการ Index/Slicing ใน NumPy Array)</li>\n        </ul>\n        <pre><code>\n# สมมติว่า df ใช้ Index ตัวเลขเริ่มต้น 0, 1, 2, ...\n\n# เลือกแถวเดียวด้วย .loc[] (ใช้ Label)\nprint(\"เลือกแถวที่มี Label Index เป็น 0 (.loc):\")\nprint(df.loc[0]) # Output คือ Series ที่มี Index เป็นชื่อคอลัมน์\n\n# เลือกหลายแถวด้วย .loc[] (ใช้ List หรือ Slice ของ Label)\nprint(\"\\nเลือกแถวที่มี Label Index 0, 2, 4 (.loc):\")\nprint(df.loc[[0, 2, 4]]) # เลือกแถวที่ 0, 2, 4\n\nprint(\"\\nเลือกแถวตั้งแต่ Label Index 1 ถึง 3 (.loc):\")\nprint(df.loc[1:3]) # สำหรับ Label Slicing ใน .loc[] **รวม** Index ตัวสุดท้ายด้วย\n\nprint(\"-\" * 20)\n\n# เลือกแถวเดียวด้วย .iloc[] (ใช้ตำแหน่ง Integer)\nprint(\"เลือกแถวตำแหน่ง Integer Index เป็น 0 (.iloc):\")\nprint(df.iloc[0]) # Output คือ Series\n\n# เลือกหลายแถวด้วย .iloc[] (ใช้ List หรือ Slice ของตำแหน่ง Integer)\nprint(\"\\nเลือกแถวตำแหน่ง Integer Index 0, 2, 4 (.iloc):\")\nprint(df.iloc[[0, 2, 4]])\n\nprint(\"\\nเลือกแถวตั้งแต่ตำแหน่ง Integer Index 1 ถึง 3 (ไม่รวม 3) (.iloc):\")\nprint(df.iloc[1:3]) # สำหรับ Integer Slicing ใน .iloc[] **ไม่รวม** Index ตัวสุดท้าย (เหมือน Python List/NumPy)\n        </code></pre>\n        <p><strong>การเลือกทั้งแถวและคอลัมน์พร้อมกันโดยใช้ <code>.loc[]</code> และ <code>.iloc[]</code>:</strong></p>\n         <pre><code>\n# Syntax: df.loc[row_label_selection, column_label_selection]\nprint(\"เลือก Name และ Age สำหรับแถว 0 และ 2 (.loc):\\n\", df.loc[[0, 2], [\'Name\', \'Age\']])\n\n# Syntax: df.iloc[row_integer_selection, column_integer_selection]\n# คอลัมน์ Name คือตำแหน่ง 0, Age คือ 1, City คือ 2\nprint(\"\\nเลือกคอลัมน์ 0 ถึง 1 (Name, Age) สำหรับแถว 1 ถึง 3 (ไม่รวม 4) (.iloc):\\n\", df.iloc[1:4, 0:2])\n         </code></pre>\n\n        <h4>Boolean Indexing / Filtering</h4>\n        <p>ใช้เงื่อนไข Boolean ในการเลือกแถวที่ตรงตามเงื่อนไขนั้นๆ ผลลัพธ์จะเป็น DataFrame ที่มีเฉพาะแถวที่เงื่อนไขเป็น <code>True</code></p>\n        <pre><code>\n# เลือกคนที่อายุมากกว่า 30 ปี\nprint(\"เลือกคนที่อายุ &gt; 30:\\n\", df[df[\'Age\'] &gt; 30])\n\n# เลือกคนที่อยู่ใน New York\nprint(\"\\nเลือกคนที่อยู่ใน New York:\\n\", df[df[\'City\'] == \'New York\'])\n\n# สามารถใช้ตัวดำเนินการตรรกะ (&, |, ~ สำหรับ and, or, not ตามลำดับ) รวมเงื่อนไขได้\n# **ต้องใส่วงเล็บคร่อมแต่ละเงื่อนไข**\nprint(\"\\nเลือกคนที่อายุ &gt; 25 และอยู่ใน New York:\\n\", df[(df[\'Age\'] &gt; 25) & (df[\'City\'] == \'New York\')])\n        </code></pre>\n\n        <h3>การจัดการข้อมูลที่หายไป (Handling Missing Data)</h3>\n        <p>ข้อมูลที่หายไปมักแทนด้วย <code>NaN</code> (Not a Number) ซึ่งมาจาก NumPy Pandas มีเครื่องมือในการจัดการกับค่าเหล่านี้</p>\n        <pre><code>\ndata_with_nan = {\n    \'A\': [1, 2, np.nan, 4, 5],\n    \'B\': [6, np.nan, 8, 9, np.nan],\n    \'C\': [10, 11, 12, 13, 14]\n}\ndf_nan = pd.DataFrame(data_with_nan)\nprint(\"DataFrame with NaNs:\\n\", df_nan)\n\n# ตรวจสอบว่ามีค่าใดเป็น NaN หรือไม่ (ได้ Boolean DataFrame)\nprint(\"\\nตรวจสอบค่าว่าง (isnull()):\\n\", df_nan.isnull())\n\n# นับจำนวนค่าว่างในแต่ละคอลัมน์\nprint(\"\\nจำนวนค่าว่างในแต่ละคอลัมน์:\\n\", df_nan.isnull().sum())\n\n# ลบแถวที่มีค่า NaN อยู่ (อย่างน้อยหนึ่งตัว)\nprint(\"\\nลบแถวที่มี NaN (dropna()):\\n\", df_nan.dropna())\n\n# เติมค่า NaN ด้วยค่าที่ต้องการ\nprint(\"\\nเติม NaN ด้วย 0 (fillna(0)):\\n\", df_nan.fillna(0))\n\n# เติม NaN ในคอลัมน์ B ด้วยค่าเฉลี่ยของคอลัมน์ B\nprint(\"\\nเติม NaN ในคอลัมน์ B ด้วยค่าเฉลี่ย:\\n\", df_nan[\'B\'].fillna(df_nan[\'B\'].mean())) # df_nan[\'B\'].mean() จะคำนวณค่าเฉลี่ยโดยไม่รวม NaN\n        </code></pre>\n\n        <h3>การดำเนินการพื้นฐานและการจัดกลุ่ม (Basic Operations and GroupBy)</h3>\n\n        <h4>การดำเนินการกับคอลัมน์</h4>\n        <p>สามารถสร้างคอลัมน์ใหม่จากการคำนวณกับคอลัมน์ที่มีอยู่ได้</p>\n        <pre><code>\ndf[\'Age_in_Months\'] = df[\'Age\'] * 12\nprint(\"DataFrame หลังเพิ่มคอลัมน์ \'Age_in_Months\':\\n\", df)\n        </code></pre>\n\n        <h4>การจัดกลุ่มข้อมูล (GroupBy - เบื้องต้น)</h4>\n        <p>เป็นการดำเนินการที่พบบ่อยมากใน Pandas คือการจัดกลุ่มข้อมูลตามค่าในคอลัมน์ใดคอลัมน์หนึ่ง แล้วคำนวณค่ารวม (Aggregate) สำหรับแต่ละกลุ่ม เช่น หาอายุเฉลี่ยของคนในแต่ละเมือง</p>\n        <pre><code>\n# จัดกลุ่มตามคอลัมน์ \'City\' แล้วหาค่าเฉลี่ยของคอลัมน์ \'Age\' ในแต่ละกลุ่ม\naverage_age_by_city = df.groupby(\'City\')[\'Age\'].mean()\nprint(\"อายุเฉลี่ยตามเมือง:\\n\", average_age_by_city)\n# Output:\n# City\n# London      30.0\n# New York    23.5\n# Paris       35.0\n# Tokyo       28.0\n# Name: Age, dtype: float64\n        </code></pre>\n        <p><strong>คำอธิบาย:</strong></p>\n        <ol>\n            <li><code>df.groupby(\'City\')</code>: สั่งให้ Pandas จัดกลุ่มแถวใน DataFrame ตามค่าที่ไม่ซ้ำกันในคอลัมน์ \'City\'</li>\n            <li><code>[\'Age\']</code>: หลังจากจัดกลุ่มแล้ว ให้เลือกเฉพาะคอลัมน์ \'Age\' สำหรับแต่ละกลุ่ม</li>\n            <li><code>.mean()</code>: คำนวณค่าเฉลี่ยของค่าในคอลัมน์ \'Age\' สำหรับแต่ละกลุ่ม (\'City\')</li>\n        </ol>\n        <p>นี่เป็นเพียงตัวอย่างง่ายๆ ของ GroupBy ซึ่งเป็นฟังก์ชันที่ทรงพลังมากใน Pandas ครับ</p>\n\n        <hr>\n\n        <h2>สรุปและฝึกฝน</h2>\n        <p>NumPy และ Pandas คือเครื่องมือที่จำเป็นอย่างยิ่งสำหรับงานกับข้อมูลใน Python:</p>\n        <ul>\n            <li><strong>NumPy:</strong> สำหรับการคำนวณเชิงตัวเลขและเมทริกซ์อย่างมีประสิทธิภาพด้วย Array (ndarray)</li>\n            <li><strong>Pandas:</strong> สำหรับการจัดการ, ทำความสะอาด, สำรวจ, และวิเคราะห์ข้อมูลแบบตารางด้วย Series และ DataFrame</li>\n        </ul>\n        <p>การเรียนรู้สองไลบรารีนี้ต้องอาศัยการฝึกฝนอย่างต่อเนื่องครับ ลองนำไปใช้กับข้อมูลจริงดู:</p>\n        <ul>\n            <li>ลองสร้าง Array NumPy ที่ซับซ้อนขึ้น แล้วลองทำ Slicing หรือ Boolean Indexing</li>\n            <li>ลองหาไฟล์ข้อมูล CSV ง่ายๆ มาลองใช้ <code>pd.read_csv()</code> โหลดเข้าไปใน DataFrame</li>\n            <li>ลองสำรวจข้อมูลใน DataFrame ด้วย <code>.head()</code>, <code>.info()</code>, <code>.describe()</code></li>\n            <li>ลองเลือกข้อมูลบางส่วนด้วย <code>[]</code>, <code>.loc[]</code>, <code>.iloc[]</code> และลองกรองข้อมูลด้วย Boolean Indexing</li>\n            <li>ลองเล่นกับการจัดการข้อมูลที่หายไป เช่น เติมค่าเฉลี่ย</li>\n            <li>ลองใช้ <code>.groupby()</code> กับคอลัมน์ต่างๆ แล้วลองคำนวณค่ารวมอื่นๆ เช่น <code>.sum()</code>, <code>.count()</code>, <code>.max()</code>, <code>.min()</code></li>\n        </ul>\n        <p>การทำความเข้าใจพื้นฐานเหล่านี้ จะเป็นก้าวสำคัญในการเข้าสู่โลกของ Data Science ด้วย Python ครับ ขอให้สนุกกับการสำรวจข้อมูลครับ!</p>\n\n    </div>', 7);
INSERT INTO `lessons` (`lesson_id`, `course_id`, `title`, `content`, `order_number`) VALUES
(8, 1, 'Data Visualization ด้วย Matplotlib', '<style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3, h4 {\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2px solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n         h4 {\n            color: #007bff;\n            margin-top: 18px;\n            margin-bottom: 10px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n            font-size: 0.9em;\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n            font-size: 0.9em;\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>การสร้างภาพข้อมูล (Data Visualization) ด้วย Matplotlib</h1>\n\n        <p>การสร้างภาพข้อมูล หรือ Data Visualization คือกระบวนการนำข้อมูลมาแปลงให้อยู่ในรูปแบบกราฟ แผนภูมิ หรือรูปภาพ เพื่อช่วยให้เราเข้าใจแนวโน้ม รูปแบบ หรือความสัมพันธ์ในข้อมูลได้ง่ายและรวดเร็วยิ่งขึ้น Matplotlib เป็นไลบรารีที่ทรงพลังและยืดหยุ่นสำหรับการสร้างภาพข้อมูลใน Python</p>\n\n        <p><strong>ทำไมต้อง Matplotlib?</strong></p>\n        <ul>\n            <li>เป็นไลบรารีพื้นฐานที่หลายๆ ไลบรารีใช้เป็น Backend ในการสร้างกราฟ</li>\n            <li>สามารถสร้างกราฟได้หลากหลายรูปแบบ ตั้งแต่กราฟเส้น กราฟแท่ง ฮิสโทแกรม กราฟกระจาย ไปจนถึงภาพที่ซับซ้อน</li>\n            <li>ปรับแต่งองค์ประกอบต่างๆ ของกราฟได้เกือบทั้งหมด</li>\n            <li>สามารถ Export กราฟเป็นไฟล์ภาพฟอร์แมตต่างๆ ได้</li>\n        </ul>\n\n        <p>เราจำเป็นต้องติดตั้ง Matplotlib ก่อนใช้งาน (ถ้ายังไม่ได้ติดตั้ง):</p>\n        <pre><code>\npip install matplotlib\n        </code></pre>\n        <p>และเมื่อต้องการใช้งาน ก็ต้อง Import ส่วนที่ต้องการ โดยส่วนที่พบบ่อยที่สุดคือโมดูล <code>pyplot</code> ซึ่งนิยมตั้ง Alias เป็น <code>plt</code></p>\n        <pre><code>\nimport matplotlib.pyplot as plt\nimport numpy as np # Matplotlib ทำงานได้ดีกับ NumPy Array\nimport pandas as pd # และทำงานได้ดีกับ Pandas DataFrame ด้วย\n        </code></pre>\n         <p><strong>หมายเหตุ:</strong> การแสดงกราฟใน Python Script ทั่วไป มักต้องใช้คำสั่ง <code>plt.show()</code> เพื่อให้หน้าต่างกราฟปรากฏขึ้น แต่หากรันในสภาพแวดล้อมแบบ Interactive เช่น Jupyter Notebook หรือ Google Colab กราฟมักจะแสดงขึ้นมาเองหลังคำสั่ง plotting</p>\n\n\n        <h2>แนวคิดหลัก: Figure และ Axes</h2>\n\n        <p>ใน Matplotlib จะมีแนวคิดของ Figure และ Axes ซึ่งเป็นส่วนประกอบหลักของการสร้างกราฟ:</p>\n        <ul>\n            <li><strong>Figure:</strong> เปรียบเสมือน <strong>\"หน้าต่าง\"</strong> หรือ \"กระดาษวาดรูป\" ทั้งหมด เป็น Object ระดับสูงสุดที่บรรจุทุกอย่างที่เกี่ยวกับกราฟ</li>\n            <li><strong>Axes:</strong> เปรียบเสมือน <strong>\"พื้นที่วาดรูป\"</strong> หรือ \"พล็อต\" จริงๆ ภายใน Figure หนึ่งๆ อาจมี Axes ได้ตั้งแต่ 1 อัน ไปจนถึงหลายๆ อัน</li>\n        </ul>\n        <p>โดยทั่วไป เราจะสร้าง Figure และ Axes ขึ้นมาก่อน แล้วค่อยเรียกเมธอด plotting ต่างๆ (เช่น <code>.plot()</code>, <code>.scatter()</code>) จาก Object ของ Axes นั้นๆ</p>\n\n        <h2>สอง Interface: Pyplot และ Object-Oriented (OO)</h2>\n\n        <p>Matplotlib มีวิธีใช้งานหลักๆ สองแบบ:</p>\n        <ul>\n            <li><strong>Pyplot Interface:</strong> เป็นแบบ State-based (มีสถานะ) คล้ายกับการใช้งานใน MATLAB ใช้งานง่ายสำหรับการสร้างกราฟพื้นฐานอย่างรวดเร็ว โดยใช้ฟังก์ชันต่างๆ จาก <code>plt</code> โดยตรง โปรแกรมจะจัดการ Figure และ Axes ให้เราโดยอัตโนมัติ</li>\n            <li><strong>Object-Oriented (OO) Interface:</strong> เป็นการสร้างและจัดการ Object ของ Figure และ Axes อย่างชัดเจน ควบคุมได้ละเอียดกว่า และเป็นวิธีที่แนะนำสำหรับการสร้าง Figure ที่มีหลายๆ กราฟย่อย (Subplots) หรือต้องการปรับแต่งอย่างซับซ้อน</li>\n        </ul>\n        <p>เราจะเน้นที่การใช้งานแบบ OO Interface เป็นหลัก เพราะยืดหยุ่นและเป็นมาตรฐานที่ดี แต่จะแสดงตัวอย่างง่ายๆ ของ Pyplot ด้วย</p>\n\n        <h4>ตัวอย่าง กราฟเส้นอย่างง่าย ด้วย Pyplot และ OO</h4>\n        <pre><code>\n# ตัวอย่างด้วย Pyplot Interface (ง่าย รวดเร็ว)\nplt.plot([1, 2, 3, 4], [10, 15, 13, 18])\nplt.title(\"Simple Line Plot (Pyplot)\") # ตั้งชื่อกราฟ\nplt.xlabel(\"X-axis Label\") # ตั้งชื่อแกน X\nplt.ylabel(\"Y-axis Label\") # ตั้งชื่อแกน Y\nplt.show() # แสดงกราฟ\n\n# --- เปรียบเทียบกับ Object-Oriented Interface (ชัดเจนกว่า) ---\n# สร้าง Figure และ Axes อย่างชัดเจน\nfig, ax = plt.subplots() # มักใช้ subplots() เพื่อสร้าง Figure และ Axes ในคำสั่งเดียว\n\n# พล็อตข้อมูลลงบน Axes ที่สร้างขึ้น\nax.plot([1, 2, 3, 4], [10, 15, 13, 18])\n\n# ตั้งชื่อและ Label ด้วยเมธอดของ Object Axes\nax.set_title(\"Simple Line Plot (OO)\")\nax.set_xlabel(\"X-axis Label\")\nax.set_ylabel(\"Y-axis Label\")\n\nplt.show() # แสดงกราฟ (plt.show() ยังจำเป็นในการแสดง Figure ที่สร้างด้วย OO)\n        </code></pre>\n        <p>จากนี้ไป เราจะใช้ OO Interface เป็นหลักในการแสดงตัวอย่าง เพื่อให้เห็นวิธีการปรับแต่งและสร้างกราฟที่ซับซ้อนได้ชัดเจนขึ้น</p>\n\n        <h2>ชนิดกราฟพื้นฐานและการสร้าง</h2>\n\n        <p>Matplotlib รองรับการสร้างกราฟหลายประเภท เรามาดูชนิดที่พบบ่อยกันครับ (โดยใช้ OO Interface)</p>\n\n        <h4>Line Plot (กราฟเส้น)</h4>\n        <p>ใช้แสดงแนวโน้มของข้อมูลตามลำดับ เหมาะกับข้อมูลต่อเนื่อง</p>\n        <pre><code>\n# สร้างข้อมูล\nx = np.linspace(0, 10, 100) # ตัวเลข 100 ตัว ที่แบ่งเท่าๆ กันระหว่าง 0 ถึง 10\ny = np.sin(x) # คำนวณค่า sin ของแต่ละตัวใน x\n\nfig, ax = plt.subplots()\nax.plot(x, y) # ใช้เมธอด .plot() ของ Axes\n\nax.set_title(\"Sine Wave\")\nax.set_xlabel(\"X\")\nax.set_ylabel(\"sin(X)\")\n\nplt.show()\n        </code></pre>\n\n        <h4>Scatter Plot (กราฟกระจาย)</h4>\n        <p>ใช้แสดงความสัมพันธ์ระหว่างตัวแปรสองตัว โดยแสดงเป็นจุด เหมาะกับการดูรูปแบบการกระจายของข้อมูล</p>\n        <pre><code>\n# สร้างข้อมูลสุ่ม\nnp.random.seed(0) # ตั้ง seed เพื่อให้ได้ค่าสุ่มเดิมทุกครั้งที่รัน\nx = np.random.rand(50) # ค่าสุ่ม 50 ตัว ระหว่าง 0 ถึง 1\ny = np.random.rand(50) # ค่าสุ่ม 50 ตัว ระหว่าง 0 ถึง 1\ncolors = np.random.rand(50) # ค่าสำหรับใช้เป็นสีของจุด\nsizes = 1000 * np.random.rand(50) # ค่าสำหรับใช้เป็นขนาดของจุด\n\nfig, ax = plt.subplots()\nax.scatter(x, y, c=colors, s=sizes, alpha=0.5) # ใช้เมธอด .scatter() ของ Axes\n\nax.set_title(\"Scatter Plot Example\")\nax.set_xlabel(\"Random X Value\")\nax.set_ylabel(\"Random Y Value\")\n\nplt.show()\n        </code></pre>\n\n        <h4>Bar Plot (กราฟแท่ง)</h4>\n        <p>ใช้เปรียบเทียบปริมาณระหว่างกลุ่มหรือหมวดหมู่ต่างๆ</p>\n        <pre><code>\ncategories = [\'Category A\', \'Category B\', \'Category C\', \'Category D\']\nvalues = [25, 40, 30, 35]\n\nfig, ax = plt.subplots()\nax.bar(categories, values) # ใช้เมธอด .bar() ของ Axes\n\nax.set_title(\"Bar Plot Example\")\nax.set_xlabel(\"Category\")\nax.set_ylabel(\"Value\")\n\nplt.show()\n\n# ถ้าอยากได้กราฟแท่งแนวนอน ใช้ ax.barh(categories, values)\n# fig, ax = plt.subplots()\n# ax.barh(categories, values)\n# ax.set_title(\"Horizontal Bar Plot\")\n# ax.set_xlabel(\"Value\")\n# ax.set_ylabel(\"Category\")\n# plt.show()\n        </code></pre>\n\n        <h4>Histogram (ฮิสโทแกรม)</h4>\n        <p>ใช้แสดงการกระจายตัวของข้อมูลเชิงปริมาณ โดยแบ่งข้อมูลออกเป็นช่วงๆ (bins) แล้วนับความถี่ในแต่ละช่วง</p>\n        <pre><code>\n# สร้างข้อมูลที่มีการกระจายตัวแบบปกติ (ค่าเฉลี่ย 0, ค่าเบี่ยงเบนมาตรฐาน 1)\ndata = np.random.randn(1000) # 1000 จุดข้อมูล\n\nfig, ax = plt.subplots()\nax.hist(data, bins=30) # ใช้เมธอด .hist() ของ Axes, bins คือจำนวนแท่งหรือช่วงที่ต้องการแบ่ง\n\nax.set_title(\"Histogram of Random Data\")\nax.set_xlabel(\"Value\")\nax.set_ylabel(\"Frequency\")\n\nplt.show()\n        </code></pre>\n\n        <h2>การปรับแต่งกราฟ (Customization)</h2>\n        <p>จุดเด่นของ Matplotlib คือความสามารถในการปรับแต่งรายละเอียดต่างๆ ของกราฟได้เกือบทั้งหมด โดยส่วนใหญ่จะเรียกใช้เมธอดต่างๆ จาก Object ของ Axes</p>\n\n        <h4>ตัวอย่างการปรับแต่งต่างๆ</h4>\n        <pre><code>\nfig, ax = plt.subplots(figsize=(8, 5)) # กำหนดขนาดของ Figure (กว้าง, สูง) หน่วยเป็นนิ้ว\n\n# สร้างข้อมูลสำหรับสองเส้น\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x) * 0.5 + 0.5 # ปรับค่า cos เล็กน้อย\n\n# พล็อตเส้นที่ 1: สีแดง เส้นประ กลมที่จุดข้อมูล\nax.plot(x, y1, color=\'red\', linestyle=\'--\', marker=\'o\', label=\'sin(x)\')\n\n# พล็อตเส้นที่ 2: สีน้ำเงิน เส้นทึบ สี่เหลี่ยมที่จุดข้อมูล\nax.plot(x, y2, color=\'blue\', linestyle=\'-\', marker=\'s\', label=\'0.5*cos(x)+0.5\')\n\n# ตั้งชื่อกราฟและแกน (ปรับขนาดตัวอักษรได้)\nax.set_title(\"Sine and Modified Cosine Waves\", fontsize=14)\nax.set_xlabel(\"X-axis Values\", fontsize=10)\nax.set_ylabel(\"Y-axis Values\", fontsize=10)\n\n# แสดง Legend (คำอธิบายเส้น/จุด)\nax.legend(loc=\'upper right\') # กำหนดตำแหน่ง Legend\n\n# กำหนดขอบเขตของแกน (ค่าต่ำสุด, ค่าสูงสุด)\nax.set_xlim(0, 10)\nax.set_ylim(-1.2, 1.7) # เผื่อพื้นที่ให้ Legend\n\n# เพิ่ม Grid (เส้นตาราง)\nax.grid(True, linestyle=\':\', alpha=0.6) # เปิด Grid, กำหนดรูปแบบเส้น, กำหนดความโปร่งใส\n\n# ปรับการแสดงผลของ Ticks บนแกน\n# ax.set_xticks(np.arange(0, 11, 1)) # กำหนดตำแหน่งของ Ticks บนแกน X\n\nplt.show()\n        </code></pre>\n        <p>มีพารามิเตอร์อีกมากมายที่คุณสามารถใช้ปรับแต่งได้ในเมธอด plotting ต่างๆ (เช่น <code>.plot()</code>, <code>.scatter()</code>, <code>.bar()</code>) และเมธอดของ Object Axes (เช่น <code>ax.set_xticks()</code>, <code>ax.tick_params()</code>)</p>\n\n        <h2>การสร้างกราฟย่อยหลายๆ กราฟ (Subplots)</h2>\n        <p>บ่อยครั้งเราต้องการแสดงกราฟหลายๆ รูปใน Figure เดียวกัน เพื่อเปรียบเทียบข้อมูล Matplotlib มีเครื่องมือสำหรับสร้าง Subplots ได้ง่ายๆ โดยใช้ <code>plt.subplots()</code> (ใช้ s ท้าย subplot)</p>\n        <p><code>plt.subplots(nrows, ncols, figsize=(width, height))</code> จะสร้าง Figure ใหม่ และสร้าง Axes ย่อยๆ ให้เราตามจำนวนแถว (<code>nrows</code>) และคอลัมน์ (<code>ncols</code>) ที่กำหนด และจะคืนค่า Object ของ Figure และ Array ของ Object Axes กลับมา</p>\n        <pre><code>\n# สร้าง Figure ที่มี 1 แถว 2 คอลัมน์ (มี 2 กราฟย่อย)\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))\n\n# axes จะเป็น Array ของ Axes Objects [ax1, ax2]\nax1 = axes[0] # Axes ตัวแรก อยู่ด้านซ้าย\nax2 = axes[1] # Axes ตัวที่สอง อยู่ด้านขวา\n\n# พล็อตข้อมูลลงบน Axes ตัวแรก\nax1.plot([1, 2, 3], [10, 12, 15], marker=\'o\', color=\'green\')\nax1.set_title(\"Plot ย่อยที่ 1: กราฟเส้น\")\nax1.set_xlabel(\"X1\")\nax1.set_ylabel(\"Y1\")\n\n# พล็อตข้อมูลลงบน Axes ตัวที่สอง\ncategories = [\'Product A\', \'Product B\']\ncounts = [150, 220]\nax2.bar(categories, counts, color=[\'skyblue\', \'orange\'])\nax2.set_title(\"Plot ย่อยที่ 2: กราฟแท่ง\")\nax2.set_xlabel(\"Product\")\nax2.set_ylabel(\"Sales Count\")\n\n# ปรับระยะห่างระหว่าง Subplots เพื่อไม่ให้ทับกัน\nplt.tight_layout()\n\nplt.show()\n        </code></pre>\n        <p>หากมีหลายแถวหลายคอลัมน์ เช่น <code>plt.subplots(2, 2)</code>, <code>axes</code> จะเป็น Array 2 มิติ เราสามารถเข้าถึง Axes ย่อยแต่ละตัวด้วย Index <code>axes[row_index, col_index]</code> เช่น <code>axes[0, 0]</code> (บนซ้าย), <code>axes[0, 1]</code> (บนขวา), <code>axes[1, 0]</code> (ล่างซ้าย), <code>axes[1, 1]</code> (ล่างขวา)</p>\n\n        <h2>การบันทึกกราฟเป็นไฟล์</h2>\n        <p>เมื่อสร้างกราฟเสร็จแล้ว เราสามารถบันทึก Figure ที่สร้างขึ้นเป็นไฟล์ภาพได้หลายฟอร์แมต เช่น PNG, JPG, PDF, SVG โดยใช้คำสั่ง <code>plt.savefig()</code></p>\n        <pre><code>\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [5, 6, 7])\nax.set_title(\"Plot ที่ต้องการบันทึก\")\n\n# บันทึกเป็นไฟล์ PNG\nplt.savefig(\"my_first_matplotlib_plot.png\")\nprint(\"บันทึกกราฟเป็นไฟล์ my_first_matplotlib_plot.png เรียบร้อย\")\n\n# บันทึกเป็นไฟล์ JPG โดยกำหนดความละเอียด (dpi = dots per inch)\n# plt.savefig(\"my_plot.jpg\", dpi=300)\n\n# บันทึกเป็นไฟล์ PDF (เป็น Vector format เหมาะกับการนำไปใช้งานสิ่งพิมพ์)\n# plt.savefig(\"my_plot.pdf\")\n\n# plt.show() # หากเรียก show() หลัง savefig() กราฟจะแสดงบนหน้าจอด้วย\n        </code></pre>\n\n        <h2>การทำงานร่วมกับ Pandas</h2>\n        <p>Pandas DataFrames และ Series มีเมธอด <code>.plot()</code> ในตัว ซึ่งเป็น Wrapper ที่เรียกใช้ Matplotlib อยู่เบื้องหลัง ทำให้สร้างกราฟจากข้อมูลใน DataFrame ได้ง่ายมาก</p>\n        <pre><code>\ndata = {\'Category\': [\'A\', \'B\', \'C\', \'A\', \'B\', \'C\'],\n        \'Value\': [10, 15, 12, 18, 11, 20],\n        \'Count\': [5, 7, 6, 8, 5, 9]}\ndf = pd.DataFrame(data)\nprint(\"DataFrame สำหรับ Pandas Plot:\\n\", df)\n\n# สร้างกราฟเส้นจากคอลัมน์ \'Value\'\ndf[\'Value\'].plot(kind=\'line\', marker=\'o\', title=\'Value by Index\')\nplt.xlabel(\'Index\')\nplt.ylabel(\'Value\')\nplt.show()\n\n# สร้างกราฟแท่งจากผลรวมของ \'Count\' โดยจัดกลุ่มตาม \'Category\'\n# ขั้นตอน: จัดกลุ่ม -> หาผลรวม -> plot กราฟแท่ง\ndf.groupby(\'Category\')[\'Count\'].sum().plot(kind=\'bar\', title=\'Total Count by Category\')\nplt.xlabel(\'Category\')\nplt.ylabel(\'Total Count\')\nplt.xticks(rotation=0) # ทำให้ชื่อบนแกน X ไม่อยู่ในแนวเอียง\nplt.show()\n        </code></pre>\n        <p>การใช้ <code>.plot()</code> ของ Pandas ช่วยลดขั้นตอนในการสร้างกราฟพื้นฐานได้มาก แต่ถ้าต้องการปรับแต่งซับซ้อน หรือสร้าง Subplots ที่หลากหลาย อาจจะต้องกลับมาใช้เมธอดของ Matplotlib Objects โดยตรง</p>\n\n        <hr>\n\n        <h2>สรุปและฝึกฝน</h2>\n        <p>Matplotlib เป็นเครื่องมือสำคัญในการสร้างภาพข้อมูลใน Python:</p>\n        <ul>\n            <li>เข้าใจแนวคิด <strong>Figure</strong> และ <strong>Axes</strong> ซึ่งเป็นส่วนประกอบหลัก</li>\n            <li>เรียนรู้การสร้างกราฟพื้นฐานเช่น <strong>Line Plot</strong>, <strong>Scatter Plot</strong>, <strong>Bar Plot</strong>, <strong>Histogram</strong></li>\n            <li>รู้จักวิธี <strong>ปรับแต่ง</strong> องค์ประกอบต่างๆ ของกราฟด้วยเมธอดของ Axes Object (<code>.set_title()</code>, <code>.set_xlabel()</code>, <code>.legend()</code>, ฯลฯ)</li>\n            <li>สร้างกราฟหลายๆ รูปใน Figure เดียวกันด้วย <strong>Subplots</strong> (ใช้ <code>plt.subplots()</code>)</li>\n            <li><strong>บันทึกกราฟ</strong> เป็นไฟล์ภาพด้วย <code>plt.savefig()</code></li>\n            <li>สามารถสร้างกราฟพื้นฐานจาก Pandas DataFrame ได้ง่ายๆ ด้วยเมธอด <strong><code>.plot()</code></strong></li>\n        </ul>\n        <p>การสร้างภาพข้อมูลเป็นทั้งศาสตร์และศิลป์ ต้องอาศัยการฝึกฝนเพื่อเลือกชนิดกราฟที่เหมาะสมและปรับแต่งให้สื่อความหมายของข้อมูลได้ชัดเจนที่สุด ลองนำ Matplotlib ไปใช้สร้างภาพข้อมูลจากข้อมูลที่คุณมี หรือจากข้อมูลตัวอย่างในไลบรารีอื่นๆ ดูนะครับ</p>\n        <p>ลองเปลี่ยนชนิดกราฟ ปรับสี ขนาดเส้น/จุด เพิ่มชื่อ เพิ่ม Legend ดู เพื่อให้คุ้นเคยกับการปรับแต่งต่างๆ ครับ ขอให้สนุกกับการสร้างสรรค์ภาพข้อมูลครับ!</p>\n\n    </div>', 8),
(9, 1, 'Machine Learning Basics ด้วย Scikit-learn', '<style>\n        body {\n            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: auto;\n            background: #fff;\n            padding: 20px 30px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n        h1, h2, h3, h4 {\n            color: #0056b3;\n            margin-top: 25px;\n            margin-bottom: 15px;\n        }\n         h1 {\n            text-align: center;\n            color: #003366;\n        }\n        h2 {\n             border-bottom: 2dpix solid #eee;\n             padding-bottom: 5px;\n        }\n        h3 {\n            color: #0069d9;\n            margin-top: 20px;\n        }\n         h4 {\n            color: #007bff;\n            margin-top: 18px;\n            margin-bottom: 10px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        code {\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            background-color: #e9e9e9;\n            padding: 2px 5px;\n            border-radius: 4px;\n            font-size: 0.9em;\n        }\n        pre {\n            background-color: #272727;\n            color: #f8f8f2;\n            padding: 15px;\n            border-radius: 5px;\n            overflow-x: auto; /* Add horizontal scroll for wide code */\n            margin-bottom: 20px;\n            font-size: 0.9em;\n        }\n        pre code {\n            background-color: transparent;\n            color: inherit;\n            padding: 0;\n            border-radius: 0;\n        }\n         .code-comment {\n            color: #999; /* Style for comments within code blocks */\n         }\n         .code-output {\n            background-color: #f0f0f0;\n            color: #333;\n            padding: 10px;\n            border-left: 4px solid #0056b3;\n            margin-bottom: 15px;\n            font-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\n            font-size: 0.9em;\n            white-space: pre-wrap; /* Preserve whitespace and wrap text */\n            word-break: break-all; /* Break long words */\n         }\n\n        strong {\n            color: #0056b3;\n        }\n        ul {\n            margin-bottom: 15px;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 8px;\n        }\n         .warning {\n            background-color: #fff3e0; /* Orange-ish background */\n            border-left: 4px solid #ff9800; /* Orange border */\n            padding: 10px 15px;\n            margin-bottom: 15px;\n            border-radius: 4px;\n         }\n         .warning strong {\n             color: #ff9800;\n         }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>พื้นฐาน Machine Learning ด้วย Scikit-learn</h1>\n\n        <p><strong>Machine Learning (ML)</strong> คือสาขาย่อยของปัญญาประดิษฐ์ (AI) ที่มุ่งเน้นการสร้างระบบที่สามารถ \"เรียนรู้\" จากข้อมูลได้โดยไม่ต้องถูกโปรแกรมอย่างชัดเจนว่าต้องทำอะไรในแต่ละสถานการณ์ โดยอาศัย Algorithm ในการค้นหารูปแบบ (Patterns) ในข้อมูล และนำรูปแบบนั้นไปใช้ในการตัดสินใจหรือพยากรณ์สำหรับข้อมูลใหม่ๆ</p>\n\n        <p><strong>ประเภทหลักของ Machine Learning (ในมุมเบื้องต้น):</strong></p>\n        <ul>\n            <li><strong>Supervised Learning:</strong> การเรียนรู้แบบมีผู้สอน ข้อมูลที่เราใช้ฝึกจะมีทั้งส่วนที่เป็น \"คุณลักษณะ\" (Features หรือ X) และ \"ป้ายกำกับ\" (Labels หรือ y) ที่เป็นค่าเฉลย เราต้องการให้ Model เรียนรู้ความสัมพันธ์ระหว่าง X และ y เพื่อนำไปทำนาย y สำหรับข้อมูล X ใหม่ที่ไม่เคยเห็น</li>\n            <li><strong>Unsupervised Learning:</strong> การเรียนรู้แบบไม่มีผู้สอน ข้อมูลที่ใช้ฝึกจะมีเฉพาะส่วนที่เป็นคุณลักษณะ (Features) ไม่มีป้ายกำกับ เราต้องการให้ Model ค้นหารูปแบบ โครงสร้าง หรือความสัมพันธ์ที่ซ่อนอยู่ในข้อมูลเอง เช่น การจัดกลุ่มข้อมูล (Clustering)</li>\n        </ul>\n\n        <p><strong>งานที่พบบ่อยใน Supervised Learning:</strong></p>\n        <ul>\n            <li><strong>Classification:</strong> การทำนายค่าที่เป็นหมวดหมู่/ประเภท (Categorical Value) เช่น ทำนายว่ารูปนี้เป็นรูปหมาหรือแมว, ทำนายว่าอีเมลนี้เป็น Spam หรือไม่</li>\n            <li><strong>Regression:</strong> การทำนายค่าที่เป็นตัวเลขต่อเนื่อง (Continuous Value) เช่น ทำนายราคาบ้าน, ทำนายยอดขายในเดือนถัดไป</li>\n        </ul>\n\n        <p><strong>Scikit-learn</strong> (มักเขียนเป็น <code>sklearn</code> ในโค้ด) เป็นไลบรารีที่ได้รับความนิยมอย่างสูงใน Python สำหรับ Machine Learning เพราะมี Algorithm ML ยอดนิยมหลากหลายชนิดให้เลือกใช้ มี API ที่เรียบง่าย เป็นมาตรฐาน และทำงานได้ดีกับ NumPy, Pandas, Matplotlib</p>\n\n        <p>เราจำเป็นต้องติดตั้ง Scikit-learn ก่อนใช้งาน (ถ้ายังไม่ได้ติดตั้ง):</p>\n        <pre><code>\npip install scikit-learn\n        </code></pre>\n         <p>และมักจะต้องใช้ควบคู่ไปกับ NumPy และ Pandas</p>\n\n        <h2>ขั้นตอนมาตรฐานในการทำงานกับ Scikit-learn (สำหรับ Supervised Learning)</h2>\n\n        <ol>\n            <li><strong>โหลดและเตรียมข้อมูล (Load &amp; Prepare Data):</strong> นำข้อมูลเข้ามา และจัดให้อยู่ในรูปแบบที่ Scikit-learn เข้าใจได้ดี (มักเป็น NumPy Array หรือ Pandas DataFrame) แบ่งข้อมูลเป็นส่วนที่เป็น \"คุณลักษณะ\" (X) และ \"ป้ายกำกับ\" (y)</li>\n            <li><strong>แบ่งข้อมูล (Split Data):</strong> แบ่งข้อมูลที่มีออกเป็น 2 ส่วนหลัก คือ ชุดข้อมูลสำหรับฝึก Model (Training Set) และชุดข้อมูลสำหรับทดสอบ Model (Testing Set)</li>\n            <li><strong>เลือก Model (Choose a Model):</strong> เลือก Algorithm ML ที่เหมาะสมกับงานของเรา (Classification หรือ Regression) และลักษณะข้อมูล</li>\n            <li><strong>สร้าง Model (Create Model Instance):</strong> สร้าง Object ของ Model ที่เลือกขึ้นมา</li>\n            <li><strong>ฝึก Model (Train the Model):</strong> ใช้เมธอด <code>.fit(X_train, y_train)</code> เพื่อให้ Model เรียนรู้จากชุดข้อมูลฝึก</li>\n            <li><strong>ทำนาย (Predict):</strong> ใช้เมธอด <code>.predict(X_test)</code> หรือ <code>.predict_proba()</code> (สำหรับ Classification) เพื่อให้ Model ทำนายผลลัพธ์จากชุดข้อมูลทดสอบที่ไม่เคยเห็นมาก่อน</li>\n            <li><strong>ประเมินผล (Evaluate):</strong> ใช้ Metric ที่เหมาะสม (เช่น Accuracy, Precision, Recall, F1-score สำหรับ Classification หรือ Mean Squared Error, R² score สำหรับ Regression) เพื่อวัดประสิทธิภาพของ Model บนชุดข้อมูลทดสอบ</li>\n        </ol>\n\n        <h3>การแบ่งข้อมูล (Train/Test Split)</h3>\n        <p>ขั้นตอนการแบ่งข้อมูลเป็น Training Set และ Testing Set เป็นสิ่งสำคัญมาก เพื่อให้เราสามารถประเมินประสิทธิภาพของ Model บนข้อมูลใหม่ๆ ได้อย่างเป็นกลาง และหลีกเลี่ยงปัญหา <strong>Overfitting</strong> (Model เรียนรู้จากข้อมูลฝึกได้ดีเกินไป จนไม่สามารถทำงานได้ดีกับข้อมูลที่ไม่เคยเห็น)</p>\n        <p>เราใช้ฟังก์ชัน <code>train_test_split</code> จาก <code>sklearn.model_selection</code> เพื่อทำขั้นตอนนี้</p>\n\n        <pre><code>\n# สมมติว่าคุณมีข้อมูล X (Features) และ y (Labels) อยู่แล้วในรูปแบบ NumPy Array หรือ Pandas DataFrame\n\nfrom sklearn.model_selection import train_test_split\nimport numpy as np # ใช้สร้างข้อมูลตัวอย่าง\n\n# สร้างข้อมูลตัวอย่าง (Features 2 คอลัมน์, 100 แถว)\nX = np.random.rand(100, 2)\ny = np.random.randint(0, 2, 100) # Labels เป็น 0 หรือ 1 (สำหรับ Classification)\n\n# แบ่งข้อมูลเป็น Training (80%) และ Testing (20%)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n<span class=\"code-comment\"># test_size=0.2 หมายถึง 20% ของข้อมูลจะถูกใช้เป็น Testing Set (ที่เหลือ 80% เป็น Training Set)\n# random_state=42 ช่วยให้ผลการแบ่งข้อมูลเหมือนเดิมทุกครั้งที่รัน (เพื่อให้ผลลัพธ์โค้ดซ้ำได้)</span>\n\nprint(\"Shape ของ X_train:\", X_train.shape)\nprint(\"Shape ของ y_train:\", y_train.shape)\nprint(\"Shape ของ X_test:\", X_test.shape)\nprint(\"Shape ของ y_test:\", y_test.shape)\n        </code></pre>\n        <h4>ผลลัพธ์จากการรันโค้ดด้านบน (จำลอง)</h4>\n        <div class=\"code-output\">\nShape ของ X_train: (80, 2)\nShape ของ y_train: (80,)\nShape ของ X_test: (20, 2)\nShape ของ y_test: (20,)\n        </div>\n        <p><strong>คำอธิบาย:</strong> ฟังก์ชัน <code>train_test_split</code> จะคืนค่ามา 4 ตัวตามลำดับ ได้แก่ X_train, X_test, y_train, y_test</p>\n\n\n        <h2>พื้นฐาน Classification (ด้วย K-Nearest Neighbors - KNN)</h2>\n\n        <p>Classification คือการทำนายว่าข้อมูลใหม่ๆ จะอยู่ในหมวดหมู่ (Class) ใด</p>\n        <p><strong>K-Nearest Neighbors (KNN)</strong> เป็น Algorithm Classification ที่ค่อนข้างง่ายและเป็นธรรมชาติ หลักการคือ เมื่อต้องการทำนายข้อมูลใหม่หนึ่งจุด จะไปดูว่ามีข้อมูลในชุดฝึก K จุดไหนที่อยู่ใกล้จุดใหม่นี้มากที่สุด แล้วทำนาย Class ที่มีจำนวนมากที่สุดในกลุ่ม K จุดนั้น</p>\n\n        <h4>ตัวอย่างโค้ด Classification ด้วย KNN</h4>\n        <pre><code>\n<span class=\"code-comment\"># นำเข้าโมดูลที่ต้องใช้</span>\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier # Model Algorithm\nfrom sklearn.metrics import accuracy_score       # Metric สำหรับประเมินผล Classification\nfrom sklearn.datasets import make_classification   # ใช้สร้างข้อมูลตัวอย่าง\n\n<span class=\"code-comment\"># 1. สร้างข้อมูลตัวอย่างสำหรับ Classification (Supervised Learning)</span>\n<span class=\"code-comment\"># X คือ Features (2 คอลัมน์), y คือ Labels (0 หรือ 1)</span>\nX, y = make_classification(n_samples=100, n_features=2, n_informative=2,\n                           n_redundant=0, n_clusters_per_class=1, flip_y=0.05,\n                           random_state=42)\n<span class=\"code-comment\"># n_samples: จำนวนจุดข้อมูลทั้งหมด\n# n_features: จำนวนคุณลักษณะ (ฟีเจอร์)\n# n_informative: จำนวนฟีเจอร์ที่เกี่ยวข้องกับการทำนาย\n# random_state: เพื่อให้ได้ข้อมูลเดิมทุกครั้งที่รัน</span>\n\n<span class=\"code-comment\"># 2. แบ่งข้อมูลเป็น Training และ Testing Sets</span>\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n<span class=\"code-comment\"># 3. เลือกและสร้าง Model (KNN)</span>\n<span class=\"code-comment\"># n_neighbors คือค่า K (จำนวนเพื่อนบ้านที่ใกล้ที่สุดที่ใช้พิจารณา)</span>\nknn_model = KNeighborsClassifier(n_neighbors=5)\n\n<span class=\"code-comment\"># 4. ฝึก Model ด้วย Training Data</span>\nknn_model.fit(X_train, y_train)\n<span class=\"code-comment\"># Model ได้เรียนรู้ความสัมพันธ์ระหว่าง X_train และ y_train แล้ว</span>\n\n<span class=\"code-comment\"># 5. ทำนาย Labels ของ Testing Data ด้วย Model ที่ฝึกแล้ว</span>\ny_pred = knn_model.predict(X_test)\n\n<span class=\"code-comment\"># 6. ประเมินผล Model</span>\naccuracy = accuracy_score(y_test, y_pred)\n<span class=\"code-comment\"># accuracy_score เปรียบเทียบ y_test (ค่าจริง) กับ y_pred (ค่าที่ Model ทำนาย)</span>\n\nprint(\"ค่าจริง (y_test) 5 ตัวแรก:\", y_test[:5])\nprint(\"ค่าทำนาย (y_pred) 5 ตัวแรก:\", y_pred[:5])\nprint(\"ความแม่นยำของ Model (Accuracy):\", accuracy)\n        </code></pre>\n\n        <h4>ผลลัพธ์จากการรันโค้ด Classification (จำลอง)</h4>\n        <div class=\"code-output\">\nค่าจริง (y_test) 5 ตัวแรก: [0 1 0 1 1]\nค่าทำนาย (y_pred) 5 ตัวแรก: [0 1 0 1 1] <span class=\"code-comment\"># ตัวเลขอาจแตกต่างไปจากการรันจริงเล็กน้อยขึ้นกับข้อมูลสุ่ม แต่โครงสร้างจะเหมือนกัน</span>\nความแม่นยำของ Model (Accuracy): 0.95 <span class=\"code-comment\"># ตัวเลขอาจแตกต่างไป แต่ควรใกล้เคียง 1.0 (100%) สำหรับข้อมูล make_classification ง่ายๆ</span>\n        </div>\n\n        <h3>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอใน Classification</h3>\n\n        <ul>\n            <li><strong>ไม่ได้แบ่งข้อมูล Train/Test:</strong> หากฝึกและทดสอบ Model ด้วยข้อมูลชุดเดียวกัน Model อาจได้ Accuracy สูงมาก (1.0) แต่ไม่ได้หมายความว่า Model ดีจริง อาจเป็นแค่ Overfitting ซึ่ง Model จะทำงานได้แย่กับข้อมูลใหม่ๆ <span class=\"warning\"><strong>ระวัง:</strong> อย่าเรียก <code>model.fit(X, y)</code> แล้วตามด้วย <code>model.predict(X)</code> และวัดผล! ต้องแบ่งข้อมูลก่อนเสมอ</span></li>\n            <li><strong>ขนาดหรือชนิดข้อมูลไม่ถูกต้อง:</strong> Scikit-learn มักรับข้อมูล X เป็น 2 มิติ (Features หลายคอลัมน์, แต่ละแถวคือหนึ่ง Sample) และ y เป็น 1 มิติ (Labels ของแต่ละ Sample) หากส่งข้อมูลผิด Shape หรือเป็นชนิดข้อมูลที่ Model ไม่รองรับ (เช่น Object ใน Pandas DataFrame) จะเกิด Error เช่น <code>ValueError</code> <span class=\"warning\"><strong>ระวัง:</strong> ตรวจสอบ <code>.shape</code> ของ X และ y ก่อนส่งเข้า <code>.fit()</code> และ <code>.predict()</code> และตรวจสอบ <code>.dtypes</code> หากใช้ Pandas</span></li>\n            <li><strong>การเลือกค่า K ใน KNN:</strong> ค่า <code>n_neighbors</code> (K) มีผลต่อประสิทธิภาพ Model ค่า K ที่น้อยเกินไปอาจทำให้ Model Sensitive ต่อ Noise (Overfitting) ค่า K ที่มากเกินไปอาจทำให้ Model เรียบเกินไป (Underfitting) ต้องลองปรับค่า K ที่เหมาะสม (ใช้เทคนิค Hyperparameter Tuning ในภายหลัง)</li>\n             <li><strong>Feature Scaling:</strong> KNN อ่อนไหวต่อ Scale ของ Features หาก Features บางตัวมีค่ามาก บางตัวมีค่าน้อย อาจทำให้ฟีเจอร์ค่ามากมีอิทธิพลต่อระยะทางมากกว่าความเป็นจริง การทำ Feature Scaling (เช่น Standardization) ก่อนส่งข้อมูลให้ KNN มักจะช่วยให้ Model ทำงานได้ดีขึ้น <span class=\"warning\"><strong>ระวัง:</strong> สำหรับ Algorithm ที่ใช้ระยะทาง (เช่น KNN, SVM ที่ใช้ Kernel บางประเภท) ควรพิจารณาทำ Feature Scaling</span></li>\n        </ul>\n\n        <hr>\n\n        <h2>พื้นฐาน Regression (ด้วย Linear Regression)</h2>\n\n        <p>Regression คือการทำนายค่าที่เป็นตัวเลขต่อเนื่อง</p>\n        <p><strong>Linear Regression</strong> เป็น Algorithm Regression ที่ง่ายที่สุด หลักการคือ การหาความสัมพันธ์เชิงเส้นตรง (หรือระนาบ/Hyperplane ในกรณีที่มีหลายฟีเจอร์) ที่เหมาะสมที่สุดในการอธิบายความสัมพันธ์ระหว่าง Features (X) และค่าที่ต้องการทำนาย (y)</p>\n\n        <h4>ตัวอย่างโค้ด Regression ด้วย Linear Regression</h4>\n        <pre><code>\n<span class=\"code-comment\"># นำเข้าโมดูลที่ต้องใช้</span>\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression      # Model Algorithm\nfrom sklearn.metrics import mean_squared_error, r2_score # Metrics สำหรับประเมินผล Regression\nfrom sklearn.datasets import make_regression         # ใช้สร้างข้อมูลตัวอย่าง\n\n<span class=\"code-comment\"># 1. สร้างข้อมูลตัวอย่างสำหรับ Regression (Supervised Learning)</span>\n<span class=\"code-comment\"># X คือ Features (1 คอลัมน์), y คือ Labels (ค่าต่อเนื่อง)</span>\nX, y = make_regression(n_samples=100, n_features=1, n_informative=1,\n                       noise=10, random_state=42)\n<span class=\"code-comment\"># n_features=1: สร้างข้อมูลที่มี 1 ฟีเจอร์ เพื่อให้ง่ายต่อการจินตนาการว่าเป็นกราฟเส้น</span>\n<span class=\"code-comment\"># noise: เพิ่มความคลาดเคลื่อนให้กับข้อมูล เพื่อให้ดูสมจริงขึ้น</span>\n\n<span class=\"code-comment\"># 2. แบ่งข้อมูลเป็น Training และ Testing Sets</span>\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n<span class=\"code-comment\"># 3. เลือกและสร้าง Model (Linear Regression)</span>\nlinear_model = LinearRegression()\n\n<span class=\"code-comment\"># 4. ฝึก Model ด้วย Training Data</span>\nlinear_model.fit(X_train, y_train)\n<span class=\"code-comment\"># Model ได้คำนวณหา Slope (สัมประสิทธิ์) และ Intercept (จุดตัดแกน Y) ของเส้นตรงที่ดีที่สุดแล้ว</span>\n\n<span class=\"code-comment\"># 5. ทำนายค่า y ของ Testing Data ด้วย Model ที่ฝึกแล้ว</span>\ny_pred = linear_model.predict(X_test)\n\n<span class=\"code-comment\"># 6. ประเมินผล Model</span>\nmse = mean_squared_error(y_test, y_pred) # Mean Squared Error: ค่าเฉลี่ยของความต่างกำลังสองระหว่างค่าจริงกับค่าทำนาย ยิ่งน้อยยิ่งดี\nr2 = r2_score(y_test, y_pred)           # R-squared score: บอกว่า Model อธิบายความแปรปรวนของข้อมูลได้ดีแค่ไหน ค่าอยู่ระหว่าง 0 ถึง 1 ยิ่งใกล้ 1 ยิ่งดี\n\nprint(\"ค่าจริง (y_test) 5 ตัวแรก:\", y_test[:5])\nprint(\"ค่าทำนาย (y_pred) 5 ตัวแรก:\", y_pred[:5])\nprint(\"ค่าสัมประสิทธิ์ (Coefficient):\", linear_model.coef_)   <span class=\"code-comment\"># Slope ของเส้นตรง</span>\nprint(\"ค่าจุดตัดแกน Y (Intercept):\", linear_model.intercept_) <span class=\"code-comment\"># จุดตัดแกน Y</span>\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"R-squared score (R²):\", r2)\n        </code></pre>\n\n        <h4>ผลลัพธ์จากการรันโค้ด Regression (จำลอง)</h4>\n        <div class=\"code-output\">\nค่าจริง (y_test) 5 ตัวแรก: [ -2.7259...  34.3795...  -7.4245...  -1.7550...  19.5739...] <span class=\"code-comment\"># ตัวเลขทศนิยม</span>\nค่าทำนาย (y_pred) 5 ตัวแรก: [ -0.4132...  31.4801...  -2.6474...  -0.5672...  20.3516...] <span class=\"code-comment\"># ตัวเลขทศนิยม</span>\nค่าสัมประสิทธิ์ (Coefficient): [65.79...] <span class=\"code-comment\"># Slope ของเส้นตรง ประมาณ 65.79</span>\nค่าจุดตัดแกน Y (Intercept): -0.2577... <span class=\"code-comment\"># จุดตัดแกน Y ประมาณ -0.2577</span>\nMean Squared Error (MSE): 94.3521... <span class=\"code-comment\"># ค่าเฉลี่ยความคลาดเคลื่อน</span>\nR-squared score (R²): 0.9028... <span class=\"code-comment\"># ประมาณ 0.9 แสดงว่า Model อธิบายความแปรปรวนได้ค่อนข้างดี</span>\n        </div>\n\n        <h3>สิ่งที่ต้องระวัง & ข้อผิดพลาดที่อาจเจอใน Regression</h3>\n         <ul>\n            <li><strong>ไม่ได้แบ่งข้อมูล Train/Test:</strong> ปัญหา Overfitting เหมือนกับ Classification <span class=\"warning\"><strong>ระวัง:</strong> ต้องแบ่งข้อมูลก่อนเสมอ</span></li>\n            <li><strong>ขนาดหรือชนิดข้อมูลไม่ถูกต้อง:</strong> เหมือนกับ Classification ต้องตรวจสอบ Shape (X 2 มิติ, y 1 มิติ) และ Data Types <span class=\"warning\"><strong>ระวัง:</strong> ตรวจสอบ <code>.shape</code> และ <code>.dtypes</code> หากใช้ Pandas</span></li>\n            <li><strong>ความสัมพันธ์ไม่เป็นเชิงเส้น:</strong> Linear Regression เหมาะกับข้อมูลที่มีความสัมพันธ์เป็นเชิงเส้น หากความสัมพันธ์ระหว่าง Features กับ y ไม่เป็นเชิงเส้น Model จะทำนายได้ไม่ดี <span class=\"warning\"><strong>ระวัง:</strong> อาจต้องลองใช้ Model Regression อื่นๆ ที่ซับซ้อนกว่า Linear Regression หรือแปลง Features ให้มีความสัมพันธ์เชิงเส้น</span></li>\n             <li><strong>Outliers (ค่าผิดปกติ):</strong> Linear Regression ค่อนข้างอ่อนไหวต่อ Outliers ค่าผิดปกติเพียงไม่กี่ค่าอาจส่งผลกระทบอย่างมากต่อเส้น Regression ที่ Model หาเจอ <span class=\"warning\"><strong>ระวัง:</strong> ควรสำรวจข้อมูลเพื่อหาและจัดการกับ Outliers ก่อนฝึก Model</span></li>\n            <li><strong>Multicollinearity:</strong> หาก Features มีความสัมพันธ์เชิงเส้นต่อกันเองสูงมากๆ อาจทำให้ Model ไม่เสถียร (สำหรับ Linear Regression) <span class=\"warning\"><strong>ระวัง:</strong> ในงานจริงอาจต้องตรวจสอบ Multicollinearity</span></li>\n        </ul>\n\n\n        <h2>ก้าวต่อไปใน Machine Learning</h2>\n        <p>สิ่งที่เราได้เรียนรู้ในหัวข้อนี้เป็นเพียงจุดเริ่มต้นของ Machine Learning ยังมีหัวข้อและแนวคิดที่น่าสนใจอีกมากมาย เช่น:</p>\n        <ul>\n            <li><strong>Preprocessing ข้อมูล:</strong> การจัดการข้อมูลก่อนส่งเข้า Model เช่น การจัดการค่าว่าง, การแปลงข้อมูลหมวดหมู่เป็นตัวเลข (Encoding), การปรับ Scale ของ Features (Scaling)</li>\n            <li><strong>Model อื่นๆ:</strong> Decision Trees, Support Vector Machines (SVM), Neural Networks, Clustering Algorithms (สำหรับ Unsupervised Learning) ฯลฯ</li>\n            <li><strong>การปรับแต่ง Model (Hyperparameter Tuning):</strong> การหาค่า Parameter ที่เหมาะสมที่สุดสำหรับ Model เช่น ค่า K ใน KNN</li>\n            <li><strong>การประเมินผลขั้นสูง:</strong> Metrics อื่นๆ, Cross-validation (การแบ่งข้อมูลฝึก/ทดสอบหลายๆ ครั้งเพื่อประเมิน Model ได้แม่นยำขึ้น)</li>\n            <li><strong>การจัดการ Pipeline:</strong> การรวมขั้นตอน Preprocessing และ Model เข้าด้วยกัน</li>\n        </ul>\n\n        <hr>\n\n        <h2>สรุปและฝึกฝน</h2>\n        <p>คุณได้เรียนรู้พื้นฐานสำคัญของ Machine Learning ด้วย Scikit-learn แล้ว:</p>\n        <ul>\n            <li>เข้าใจความแตกต่างระหว่าง Classification และ Regression</li>\n            <li>รู้จัก Workflow มาตรฐานของ Scikit-learn (โหลด, แบ่ง, เลือก, สร้าง, ฝึก, ทำนาย, ประเมิน)</li>\n            <li>เข้าใจความสำคัญของการแบ่งข้อมูล Train/Test ด้วย <code>train_test_split</code></li>\n            <li>รู้จัก Model ง่ายๆ อย่าง K-Nearest Neighbors (KNN) สำหรับ Classification และ Linear Regression สำหรับ Regression</li>\n            <li>รู้วิธีการประเมินผลเบื้องต้นด้วย Accuracy, MSE, R²</li>\n            <li>ทราบถึงข้อผิดพลาดที่อาจเจอและสิ่งที่ต้องระวังในการเริ่มต้น</li>\n        </ul>\n        <p>Machine Learning เป็นสาขาที่เน้นการลงมือทำอย่างมากครับ ลองหา Dataset ง่ายๆ (เช่น Dataset สำเร็จรูปใน Scikit-learn เอง หรือจากแหล่งข้อมูลสาธารณะ) แล้วลองทำตาม Workflow ที่ได้เรียนรู้ไปนะครับ ลองใช้ Model อื่นๆ ที่มีใน Scikit-learn ด้วย เพื่อให้คุ้นเคยกับ API</p>\n        <p>จำไว้ว่าการเจอ Error เป็นเรื่องปกติ ให้ลองอ่าน Traceback ทำความเข้าใจ และใช้เทคนิค Debug ที่ได้เรียนไปครับ ขอให้สนุกกับการสร้าง Model แรกของคุณ!</p>\n\n    </div>', 9);

ALTER TABLE `lessons`
  ADD PRIMARY KEY (`lesson_id`),
  ADD KEY `course_id` (`course_id`);

ALTER TABLE `lessons`
  MODIFY `lesson_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

ALTER TABLE `lessons`
  ADD CONSTRAINT `lessons_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `courses` (`course_id`);
COMMIT;
